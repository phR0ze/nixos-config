{ config, lib, pkgs, f, cfg, ... }: with lib.types;
let
  machine = config.machine;
in
{
  config = lib.mkIf cfg.enable {

    # Common assertions among services
    assertions = [
      # Debug assertion
      #{ assertion = (cfg ? "debug");
      #  message = "echo '${builtins.toJSON cfg}' | jq"; }

      { assertion = (machine.net.bridge.enable);
        message = "Requires 'machine.net.bridge.enable = true;' to work correctly"; }
      { assertion = (cfg ? "nic" && cfg.nic ? "link" && cfg.nic.link != "");
        message = "Requires '${cfg.name}.nic.link' => '${builtins.toJSON cfg.nic.link}' be set to the bridge name"; }
      { assertion = (cfg ? "nic" && cfg.nic ? "ip" && cfg.nic.ip != "");
        message = "Requires '${cfg.name}.nic.ip' => '${builtins.toJSON cfg.nic.ip}' be set to a static IP address"; }
      { assertion = (cfg ? "port" && cfg.port > 0);
        message = "Requires '${cfg.name}.port' => '${builtins.toJSON cfg.nic.ip}' be set"; }
      { assertion = (cfg ? "user" && cfg.user ? "name" && cfg.user.name != null && cfg.user.name != "");
        message = "Requires '${cfg.name}.user.name' => '${builtins.toJSON cfg.user.name}' be set"; }
      { assertion = (cfg ? "user" && cfg.user ? "group" && cfg.user.group != null && cfg.user.group != "");
        message = "Requires '${cfg.name}.user.group' => '${builtins.toJSON cfg.user.group}' be set"; }
      { assertion = (cfg ? "user" && cfg.user ? "uid" && cfg.user.uid != null && cfg.user.uid > 0);
        message = "Requires '${cfg.name}.user.uid' => '${builtins.toJSON cfg.user.uid}' be set"; }
      { assertion = (cfg ? "user" && cfg.user ? "gid" && cfg.user.gid != null && cfg.user.gid > 0);
        message = "Requires '${cfg.name}.user.gid' => '${builtins.toJSON cfg.user.gid}' be set"; }
    ];

    # Requires podman virtualization to be configured
    virtualisation.podman.enable = true;

    # Create app user to run the container as for extra security
    users.users.${cfg.user.name} = {
      uid = cfg.user.uid;
      isSystemUser = true;
      group = cfg.user.group;
      home = "/var/empty";
    };
    users.groups.${cfg.user.group} = {
      gid = cfg.user.gid;
    };

    # Setup firewall exceptions
    networking.firewall.interfaces."${cfg.name}".allowedTCPPorts = [ cfg.port ];

    # Create host macvlan with a dedicated static IP for the app to port forward to
    # - see new macvlan interface `stirling-pdf@br0` with `ip a`
    # - sudo systemctl status network-addresses-stirling-pdf.service
    networking = {
      macvlans.${cfg.name} = {
        interface = "${cfg.nic.link}";
        mode = "bridge";
      };
      interfaces.${cfg.name}.ipv4.addresses = [ (f.toIP cfg.nic.ip)];
    };

    # Create a dedicated container network to keep the app isolated from other services
    systemd.services."podman-network-${cfg.name}" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = [
          "podman network rm -f ${cfg.name}"
        ];
      };
      script = ''
        if ! podman network exists ${cfg.name}; then
          podman network create ${cfg.name}
        fi
      '';
    };

    # Add additional configuration to the above generated app service unit i.e. acts as an overlay.
    # We simply match the name here that is autogenerated from the oci-container directive.
    systemd.services."podman-${cfg.name}" = {
      wantedBy = [ "multi-user.target" ];

     # Trigger the creation of the app macvlan if not already and wait for it. network-addresses... 
      # applies the static IP address to the macvlan which it waits to be created for, thus by 
      # waiting on it we ensure the macvlan is up and running with an IP address.
      wants = [
        "network-online.target"
        "network-addresses-${cfg.name}.service"
        "podman-network-${cfg.name}.service"
      ];
      after = [
        "network-online.target"
        "network-addresses-${cfg.name}.service"
        "podman-network-${cfg.name}.service"
      ];

      serviceConfig = {
        Restart = "always";
        WorkingDirectory = "/var/lib/${cfg.name}";
      };
    };

  };
}
