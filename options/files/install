#!/usr/bin/env bash
set -euo pipefail           # configure an immediate fail if something goes badly
shopt -s extglob            # enable extended globbing

# --------------------------------------------------------------------------------------------------
# Install the indicated files to the system
#
# Usage:
#   ./options/files/install STORE_PATH NIX_PATH
# Example:
#   ./options/files/install /nix/store/apzmd7w7kl9nhx66sxiagn9dv09v01m8-files /nix
#
# ### Backlog
#
# ### Testing
# - run tests with the following where temp is a directory full of files representing the store path
#   ./options/files/install temp .
#
# - you can quickly delete all installed files by just pointing at an empty directory as your source
#   mkdir test; ./options/files/install test .
# --------------------------------------------------------------------------------------------------
pkg="$(realpath "$1")"                  # the /nix/store path with all the files that need installed
dst="$(realpath "$2")"                  # destination directory for tracking e.g. /nix
files="$dst/files"                      # link to current files store path
owned_log="$dst/files.owned"            # track all the owned files
owned_tmp="$dst/files.owned.tmp"        # old unowned files copied or linked
unowned_log="$dst/files.unowned"        # track all the unowned files
unowned_tmp="$dst/files.unowned.tmp"        # old unowned files copied or linked
lock="$dst/files.lock"                  # don't do anything if the lock file exists
debug=false                             # debug mode for extra logging

# Clean up any files left over from the previous install
clean() {
  readarray -t owned_new < "$owned_log"     # read in all the owned entries
  readarray -t unowned_new < "$unowned_log" # read in all the unowned entries

  # Nested loop to check if any old files need removed
  for x in "${owned_old[@]}"; do

    # Search the new owned files to see if it still exists
    local _exists=false
    for y in "${owned_new[@]}"; do
      if [[ "$x" == "$y" ]]; then
        _exists=true
        break
      fi
    done

    # Check the new unowned as we might have changed ownership
    if [[ "$_exists" != true ]]; then
      for y in "${unowned_new[@]}"; do
        if [[ "$x" == "$y" ]]; then
          _exists=true
          break
        fi
      done
    fi

    # Remove the file if it no longer exists
    if [[ "$_exists" != true ]]; then
      echo " removing: $x"
      if [[ -d "$x" ]]; then
        rm -rf "$x"
      else
        rm -f "$x"
      fi
    fi
  done
}

# Read the metadata for the file and/or directories
metadata() {
  local _metafile="${1}"  # name of the metadata file to read

  # Read the copy metadata into an array
  # - t trims the newline off the string
  readarray -t meta < "$_metafile"
  op="${meta[0]}"         # operation type
  kind="${meta[1]}"       # kind of object [ copy, link ]
  src="${meta[2]}"        # nix store path of the object
  dirmode="${meta[3]}"    # mode for any directories needing created
  filemode="${meta[4]}"   # mode for any files needing created
  user="${meta[5]}"       # user for any directories or files being created
  group="${meta[6]}"      # group for any directories or files being created
  own="${meta[7]}"        # whether to own the file or directory or not [ default | owned | unowned ]
}

# Create missing directories with the given metadata in dirmode, user, group
mkdir_p() {
  local _dir="$1"         # directory of the file we are working with

  # Recurse until we get to an existing directory
  if [[ -d "$_dir" ]]; then
    return
  else
    mkdir_p "$(dirname "$_dir")"
  fi

  # Create the missing directory component
  echo "    mkdir: $_dir"
  echo "        >> kind=$kind, own=$own, dirmode=$dirmode, filemode=$filemode, user=$user, group=$group"
  mkdir -m $dirmode "$_dir"
  chown $user:$group "$_dir"
}

# Copy the given source store path to the destination target system path using the metadata file for 
# mode, user and group properties.
#
# Only perform the copy if one of the following is true:
# - the file doesn't already exist
# - the file hasn't yet been recorded as installed in /nix/files.unowned or /nix/files.owned
# - the file is owned
copy() {
  local _src="${1}"                           # full source nix store path
  local _target="${2}"                        # destination target system path

  local _copy=false
  if [[ "$own" == "owned" || ! -f "$_target" ]]; then
    _copy=true
  else
    # if file hasn't been installed yet then copy
    local _exists=false
    for x in "${unowned_old[@]}"; do
      if [[ "$x" == "$_target" ]]; then
        _exists=true
        break
      fi
    done
    [[ "$_exists" == false ]] && _copy=true
  fi

  if [[ "$_copy" == true ]]; then
    echo "  copying: $_src -> $_target"
    echo "        >> kind=$kind, own=$own, dirmode=$dirmode, filemode=$filemode, user=$user, group=$group"

    # install
    # - is more performant as it does this operation in one go
    # - overwrites the existing target if it exists
    # - resolves link indirection recursively to find original source
    install -C -m $filemode -o $user -g $group "$_src" "$_target"
  fi
}

# Link the given source store path to the implicated destination
link() {
  local _src="${1}"                           # nix store path e.g. /nix/store/m2938jfgq69jid493s8agw94n5rl22xh-.config/starship.toml
  local _inter="${2}"                         # intermediate path e.g. /nix/files/root/.config/starship.toml
  local _target="${3}"                        # target system path

  # Update link if it doesn't exist or is incorrect
  if [[ ! -f "$_target" ]]; then
    echo "  linking: $_target -> $_inter -> $_src"
    echo "        >> kind=$kind, own=$own, dirmode=$dirmode, filemode=$filemode, user=$user, group=$group"
    ln -sf "$_inter" "$_target"
  elif [[ "$(realpath "$_target")" != "$_src" ]]; then
    echo " updating: $_target -> $_inter -> $_src"
    echo "        >> kind=$kind, own=$own, dirmode=$dirmode, filemode=$filemode, user=$user, group=$group"
    rm -f "$_target"                          # clean to ensure it doesn't exist
    ln -sf "$_inter" "$_target"
  else
    if [[ "$debug" == true ]]; then
      echo "  leaving: $_target -> $_inter -> $_src"
      echo "        >> kind=$kind, own=$own, dirmode=$dirmode, filemode=$filemode, user=$user, group=$group"
    fi
  fi
}

# Create the file or link
mkfile() {
  local _src="${1}"                           # full source nix store path
  local _target="${2}"                        # destination target system path

  mkdir_p "$(dirname "$_target")"             # Create any needed directories for the target

  # copy nix store path to the destination target system path
  if [[ "$kind" == "copy" ]]; then
    copy "$_src" "$_target"

  # link nix store path to the destination target system path
  elif [[ "$kind" == "link" ]]; then

    # Use the saved pkg link /nix/files as an intermediate to store path.
    # In this way we can switch all links at once when we update the 'files' link.
    local _inter="${files}${_target}"

    link "$_src" "$_inter" "$_target"
  fi

  # Always track the file/link
  if [[ "$own" == "owned" || "$kind" == "link" ]]; then
    echo "$_target" >> "$owned_log"
  else
    echo "$_target" >> "$unowned_log"
  fi
}

# Loop through files
# - handles spaces in file names
mkfiles() {
  local _src
  local _target
  find "$pkg" -name "*.meta.file" | while read x; do
    metadata "$x"                             # load the metadata
    _src="${x#"$pkg"}"                        # trim off the nix store prefix e.g. /etc/foo.meta.file
    _src="${_src%".meta.file"}"               # trim off the file suffix
    _target="${_src}"                         # target is trimmed source e.g. /etc/foo
    mkfile "$src" "$_target"                  # use src path from meta data to get realpath for store link
  done
}

# Loop through directories
# - handles spaces in directory names
mkdirs() {
  local _src
  local _target
  find "$pkg" -name "*.meta.dir" | while read x; do
    metadata "$x"                             # load the metadata
    _src="${x#"$pkg"}"                        # trim off the store path prefix
    _src="${_src%".meta.dir"}"                # trim off the meta suffix
    mkdir_p "$_src"                           # create target path e.g. /home/.config

    # Don't track directories as its too dangerous to remove them
    #if [[ "$own" == "owned" ]]; then
    #  echo "$_src" >> "$owned_log"
    #fi

    # Search the directory and copy or link the store paths to the system.
    # $src will be the directory store path e.g. /nix/store/m2938jfgq69jid493s8agw94n5rl22xh-.config 
    # $y will be the individual file store paths e.g. /nix/store/m2938jfgq69jid493s8agw94n5rl22xh-.config/nvim/init.vim
    find "$src" -type f | while read y; do
      _target="${y#"$src"}"                   # trim off store path prefix e.g. ...22xh-.config/nvim/init.vim => /nvim/init.vim
      _target="${_src}${_target}"             # prefix with the target path e.g. /home/.config/nvim/init.vim
      mkfile "$y" "$_target"
    done
  done
}

# Install files
# --------------------------------------------------------------------------------------------------
[[ -f "$lock" ]] && exit
echo "installing files from ${pkg}"

# Backup the original files and read them in for reference
[[ ! -f "$owned_log" ]] && touch "$owned_log"
[[ ! -f "$unowned_log" ]] && touch "$unowned_log"
mv "$owned_log" "$owned_tmp" && touch "$owned_log"
mv "$unowned_log" "$unowned_tmp" && touch "$unowned_log"
readarray -t owned_old < "$owned_tmp"
readarray -t unowned_old < "$unowned_tmp"

# Update the source store path first to avoid creating this as a directory during the file directory 
# creation process. This will switch all linked files over to our new source store path.
if [[ ! -d "$files" ]]; then
  ln -sf "$pkg" "$files"
elif [[ "$(realpath "$files")" != "$pkg" ]]; then
  rm -f "$files"
  ln -sf "$pkg" "$files"
fi

mkdirs      # make dirs first
mkfiles     # make files second
clean       # clean up last
