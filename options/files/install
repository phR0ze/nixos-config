#!/usr/bin/env bash
set -euo pipefail           # configure an immediate fail if something goes badly
shopt -s extglob            # enable extended globbing

# --------------------------------------------------------------------------------------------------
# Install the indicated files to the system
#
# Usage:
#   ./options/files/install STORE_PATH NIX_PATH
# Example:
#   ./options/files/install /nix/store/apzmd7w7kl9nhx66sxiagn9dv09v01m8-files /nix
#
# ### Features
# - support owning directories with their own permissions '<dir>/.dir'
# - removes old 'owned' directories i.e. those that were specifically added with the '<dir>/.dir'
# - single base '/nix/files' link redirect that allows for a pseudo atomic switching
# - skips creating correct links that already exist
# - copies over files with mode, user and group
# - sanitizes '<file>.meta.<type>' metadata files to trim whitespace from properties
# - supports levels of link indirection
# - supports spaces in file names
# - supports .dotfiles i.e. files prefixed with .
# - supports directory metadata <file>.meta.dir for ownership of directories
# - support files inside nested directories
# - removes any files that don't exist in the new files
#
# ### Backlog
#
# ### Testing
# - run tests with the following where temp is a directory full of files representing the store path
#   ./options/files/install temp .
# - you can quickly delete all installed files by just pointing at an empty directory as your source
#   mkdir test; ./options/files/install test .
# --------------------------------------------------------------------------------------------------

src="$(realpath "$1")"    # the /nix/store path with all the files that need installed
dst="$(realpath "$2")"    # destination directory for tracking e.g. /nix
files="$dst/files"        # link to current files store path
log="$dst/files.log"      # file tracking all files copied or linked
tmplog="$dst/files.tmp"   # old file tracking all files copied or linked

# Trim leading and trailing whitespace
trimspace() {
  local result="$1"                       # return value
  local val="$2"                          # value to trim

  val="${val##+([[:space:]])}"            # trim leading whitespace
  val="${val%%+([[:space:]])}"            # trim trailing whitespace

  eval "$result"="'$val'"                 # return as string
}

# Read the metadata for the file and/or directories
# Sets global variables:
# - dirmode
# - filemode
# - user
# - group
metadata() {
  local metafile="${1}"                   # name of the metadata file to read

  # Read the copy metadata into an array
  # - t trims the newline off the string
  readarray -t meta < "$metafile"
  trimspace dirmode "${meta[0]}"          # get trimmed dirmode
  trimspace filemode "${meta[1]}"         # get trimmed filemode
  trimspace user "${meta[2]}"             # get trimmed user
  trimspace group "${meta[3]}"            # get trimmed group
}

# Create missing directories with the given metadata in dirmode, user, group
mkdir_p() {
  local dir="$(dirname "$1")"             # directory of the file we are working with

  # Recurse until we get to an existing directory
  if [[ -d "$dir" ]]; then
    return
  else
    mkdir_p "$dir"
  fi

  # Create the missing directory component
  echo " creating: $dir"
  echo "        >> filemode=$filemode, dirmode=$dirmode, user=$user, group=$group"
  mkdir -m $dirmode "$dir"
  chown $user:$group "$dir"
}

# Copy the given source store path to the implicated destination using the metadata file for mode, 
# user and group properties
copy() {
  local source="${1}"                     # source store file path
  local target="${1#"$src"}"              # trim off the store path prefix

  # Create any needed directories
  metadata "$source.meta.file"
  mkdir_p "$target"

  echo "  copying: $source -> $target"
  echo "        >> filemode=$filemode, dirmode=$dirmode, user=$user, group=$group"

  # install
  # - is more performant as it does this operation in one go
  # - overwrites the existing target if it exists
  # - resolves link indirection recursively to find original source
  install -C -m $filemode -o $user -g $group "$source" "$target"
  echo "$target" >> "$log"
}

# Link the given source store path to the implicated destination
link() {
  local _src="${1}"                       # source store file path
  local target="${1#"$src"}"              # trim off the store path prefix

  # Update source to use the intermediate files path which is linked back to the source store path. 
  # In this way we can switch all links at once when we update the 'files' link.
  _src="${files}${target}"

  # Create any needed directories
  metadata "$_src.meta.link"
  mkdir_p "$target"

  # Update link if it doesn't exist or is incorrect
  local _path="$(readlink "$target")"
  if [[ "$_src" != "$_path" ]]; then
    echo "  linking: $_src -> $target"
    rm -f "$target"                       # cleaner to just ensure it doesn't exist
    ln -sf "$_src" "$target"
  else
    echo "  correct: $_src -> $target"
  fi

  # Regardless of updating the link we depend on it
  echo "$target" >> "$log"
}

# Create owned directories
mkdirs() {
  local target

  find "$src" -name ".meta.dir" | while read x; do # handles spaces in results
    target="${x#"$src"}"                      # trim off the store path prefix
    metadata "$x"                             # load the metadata
    mkdir_p "$target"                         # create all directories
    echo "$(dirname "$target")" >> "$log"     # track owned directories
  done
}

# Clean up any files left over from the previous install
clean() {
  readarray -t oldfiles < "$tmplog"       # read in all the old files
  readarray -t newfiles < "$log"          # read in all the new files

  # Nested loop to check if any oldfiles no longer exist
  for x in "${oldfiles[@]}"; do

    # Search the new files
    exists=false
    for y in "${newfiles[@]}"; do
      if [[ "$x" == "$y" ]]; then
        exists=true
        break
      fi
    done

    # Remove the file if it no longer exists
    if [[ "$exists" != true ]]; then
      echo " removing: $x"
      [[ -d "$x" ]] && rm -rf "$x" || rm -f "$x"
    fi
  done
}

# Save off the existing tracking files
[[ ! -e "$log" ]] && touch "$log"
mv "$log" "$tmplog" && touch "$log"

# Update the source store path first to avoid creating this as a directory during the file directory 
# creation process. This will switch all linked files over to our new source store path.
if [[ ! -e "$files" ]]; then
  ln -sf "$src" "$files"
elif [[ "$files" != "$src" ]]; then
  rm -f "$files"
  ln -sf "$src" "$files"
fi

# Process all files from the source store path
echo "installing files from ${src}"

# Process owned directories first
mkdirs

# Process all the files next
find "$src" -type l | while read x; do      # handles spaces in results
  
  # Copy file to destination
  if [[ -e "$x.file" ]]; then
    copy "$x"

  # Link file to destination
  else
    link "$x"
  fi
done

# Clean up any files that no longer exist
clean
