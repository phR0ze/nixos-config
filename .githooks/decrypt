#!/usr/bin/env bash
set -e -u  # Exit on non-zero status or unset variables

REPO_ROOT=$(readlink -f $(dirname $BASH_SOURCE[0]))
echo "post-commit: $REPO_ROOT"

# Create the target file name: <name>.dec.yaml
DIR=$(dirname "$1")                 # get the diretory name
FILE_NAME=$(basename "$1")          # get the full file name
NAME="${FILE_NAME%%.*}"             # trim off the file extension
EXT="${FILE_NAME##*.}"              # trim off the prefix including the '.'
TARGET="$DIR/${NAME}.dec.${EXT}"

echo "decrypting testing"

# 
#PARENT_PID=$(ps -o ppid= -p $$)
#PARENT_NAME=$(ps -o comm= -p $PARENT_PID)
#
#is_rebase_in_progress() {
#    if [ -d "$(git rev-parse --git-dir)/rebase-apply" ] || [ -d "$(git rev-parse --git-dir)/rebase-merge" ]; then
#        return 0
#    else
#        return 1
#    fi
#}
#
#if is_rebase_in_progress; then
#    echo "Rebase in action - skip"
#    exit 0
#fi
#
#ACTION=0  # Initialize an ACTION variable to track if any files were decrypted
#REPO_ROOT=$(git rev-parse --show-toplevel)

# Find all the files to decrypt
FILES_TO_DECRYPT=$(find "${REPO_ROOT}" -type f -iname "*.enc.*" -exec realpath '{}' \;)
echo $FILES_TO_DECRYPT

#IFS=$'\n'  # Set the internal field separator to newline to handle filenames with spaces
#
#for FILE in ${FILES_TO_DECRYPT}; do
#    if grep -q 'ENC\[' "${FILE}"; then  # Check if the file contains encrypted data
#        ACTION=1  # Set ACTION to 1 to indicate that a file was decrypted
#        echo "Decrypting file in place: ${FILE}"  # Print a message indicating the file is being decrypted
#        sops --config ~/.sops.yaml -d -i "${FILE}" || true
#    fi
#done
#unset IFS  # Reset the internal field separator to its default value
#
#if [ ${ACTION} -eq 0 ]; then
#    echo "Nothing was decrypted"
#fi
#
