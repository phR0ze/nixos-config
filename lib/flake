#!/usr/bin/env bash
#set -x

# Flake utility code
# 
# ## Features
# - Set machine as flake controller
# --------------------------------------------------------------------------------------------------
FLAKE="$SOURCE_DIR/flake.nix"
FLAKE_LOCK="$SOURCE_DIR/flake.lock"
FLAKE_BASE="$SOURCE_DIR/base.nix"
FLAKE_BASE_LOCK="$SOURCE_DIR/base.lock"
MACHINES_DIR="$SOURCE_DIR/machines"

# Ensure that flake related commands are executed from the root of the nixos-config directory
flake::ensure_origin()
{
    if [[ "$path" != "nixos-config" ]]; then
        log::fatal "Flake commands must be run from the root of the ${cyan}nixos-config${none} repo"
    fi
}

# Switch flake
# - $1 - target machine
#
# Example: flake::switch homelab
flake::switch()
{
    flake::ensure_origin

    local machine="$1"
    local machine_path="$MACHINES_DIR/$machine"
    local flake_local="$machine_path/flake.nix"
    local flake_local_lock="$machine_path/flake.lock"

    # Check if the given machine exists
    [[ "$machine" == "" ]] && log::fatal "Machine name not given"
    if [ ! -d "$machine_path" ]; then
        log::fatal "Invalid machine path: ${cyan}${machine_path}${none}"
    fi

    # Stage the flake files
    if [ -e "$flake_local" ]; then
        # Use the machine specific flake files if they exist
        cp "$flake_local" "$FLAKE"
        cp "$flake_local_lock" "$FLAKE_LOCK"
    else
        # Use the shared flake base files if they exist
        cp "$FLAKE_BASE" "$FLAKE"
        cp "$FLAKE_BASE_LOCK" "$FLAKE_LOCK"
    fi

    # Create the configuration link
    # - Using relative path here on purpose
    ln -sf "machines/$machine/configuration.nix" "$SOURCE_DIR/configuration.nix"
}
