#!/usr/bin/env bash
#set -x

# Flake utility code
# 
# ## Features
# - Set machine as flake controller
# --------------------------------------------------------------------------------------------------
MACHINE=""

# Ensure that flake related commands are executed from the root of the nixos-config directory
flake::ensure_origin()
{
    if [[ "$(grep '# nixos-config' $SOURCE_DIR/README.md)" == "" ]]; then
        log::fatal "Flake commands must be run from the root of the ${cyan}nixos-config${none} repo"
    fi
}

# Switch flake
# - $1 - target machine
#
# Example: flake::switch homelab
flake::switch()
{
    flake::ensure_origin

    MACHINE="$1"
    local machine_path="machines/$MACHINE"
    local flake_local="$machine_path/flake.nix"
    local flake_local_lock="$machine_path/flake.lock"

    # Check if the given machine exists
    [[ "$MACHINE" == "" ]] && log::fatal "Machine name not given"
    if [ ! -d "$machine_path" ]; then
        log::fatal "Invalid machine path: ${cyan}${machine_path}${none}"
    fi

    # Stage the flake files
    if [ -e "$flake_local" ]; then
        # Use the machine specific flake files if they exist
        cp "$flake_local" flake.nix 
        cp "$flake_local_lock" flake.lock
    else
        # Use the shared flake base files if they exist
        cp base.nix flake.nix
        cp base.lock flake.lock
    fi

    # Add the flake files but setup a trap to remove them again
    git add flake.nix -f
    git add flake.lock -f

    # Create the configuration link
    # - Using relative path here on purpose
    ln -sf "machines/$MACHINE/configuration.nix" configuration.nix
    git add configuration.nix -f
}

# Restore the standard flake files back to prestine in git
flake::restore()
{
    if [[ "$(git diff --staged --name-only -- flake.nix flake.lock configuration.nix *.dec* */*.dec*)" != "" ]]; then
        log::ln "Restoring flake files back to prestine:"
        log::ln "> ${cyan}flake.nix${none}, ${cyan}flake.lock${none}, ${cyan}configuration.nix${none}"
        log::ln "> ${cyan}args.dec.yaml${none}, ${cyan}machines/$MACHINE/args.dec.yaml${none}"
        git restore --staged flake.nix flake.lock configuration.nix *.dec* */*.dec*
    fi
}

# Cleanup if interrupted or failed after changing variables
flake::cleanup()
{
    flake::restore
    exit 0
}
