#!/usr/bin/env bash
#set -x

# Flake utility code
# 
# ## Features
# - Set target (machine or profile) as flake controller
# --------------------------------------------------------------------------------------------------
MACHINE=""
PROFILE=""
TARGET=""

# Ensure that flake related commands are executed from the root of the nixos-config directory
flake::ensure_origin()
{
    if [[ "$(grep '# nixos-config' $SOURCE_DIR/README.md)" == "" ]]; then
        log::fatal "Flake commands must be run from the root of the ${cyan}nixos-config${none} repo"
    fi
}

# Ensure machine name was given and exists
# - $1 - target
#
# Example: flake::ensure_target machines/homelab
# Example: flake::ensure_target profiles/xfce/base
flake::ensure_target()
{
    flake::ensure_origin

    TARGET="$1"

    # Check if the machine name is missing
    if [[ "$TARGET" == "" || "$TARGET" == "machines/" || "$TARGET" == "profiles/" ]]; then
        log::ls -n "Validating target exists..."
        log::status 1
        log::fatal "Machine or profile not given"
    fi

    # Check that the given target name is valid
    log::ls -n "Validating target ${cyan}$TARGET${none} exists..."
    if [ ! -e "$TARGET" ]; then
        log::status 1
        log::fatal "Invalid target path: ${cyan}${TARGET}${none}"
    else
        log::status
    fi
}

# Switch flake
# - $1 - target
#
# Example: flake::switch machines/homelab
flake::switch()
{
    flake::ensure_target $TARGET

    local flake_local="$TARGET/flake.nix"
    local flake_local_lock="$TARGET/flake.lock"
    log::ls "Switching to target ${cyan}$TARGET${none}"

    # Stage the flake files
    if [ -e "$flake_local" ]; then
        # Use the machine specific flake files if they exist
        cp "$flake_local" flake.nix 
        cp "$flake_local_lock" flake.lock
    else
        # Use the shared flake base files if they exist
        cp base.nix flake.nix
        cp base.lock flake.lock
    fi

    # Decrypt and temporarily add the flake files
    git decrypt
    git add flake.nix -f
    git add flake.lock -f
    git add "args.dec.json" -f

    # Optionally include machine's configuration
    if [[ "$MACHINE" != "" ]]; then
        # - Using relative path here on purpose
        ln -sf "$TARGET/configuration.nix" configuration.nix
        git add configuration.nix -f
        git add "$TARGET/args.dec.json" -f

        # Update args.nix with hostname and comment
        utils::update "args.nix" str "hostname" "${MACHINE}"
    fi
    utils::update "args.nix" str "git.comment" "$(git log -1 --oneline --no-decorate)"
    git add "args.nix"
}

# Restore the standard flake files back to prestine in git
flake::restore()
{
    # Restore for the general case
    if [[ "$(git diff --staged --name-only -- flake.nix flake.lock *.dec*)" != "" ]]; then
        echo -n "Restoring flake files back to prestine"
        find . -type f -name "*.dec*" -delete
        git restore --staged flake.nix flake.lock *.dec*
    fi

    # Restore for machine build additional files
    if [[ "$(git diff --staged --name-only -- configuration.nix)" != "" ]]; then
        git restore --staged configuration.nix
    fi
    if [[ "$(git diff --staged --name-only -- */*.dec*)" != "" ]]; then
        git restore --staged */*.dec*
    fi

    if [[ "$(git diff --staged --name-only -- args.nix)" != "" ]]; then
        echo -n "Restoring args.nix to prestine"
        git restore --staged args.nix
        git checkout args.nix
    fi
}

# Cleanup trap function. Typically not used as the local functions will have their own which will
# call flake::restore directly
flake::trap()
{
    flake::restore
    exit 1
}
