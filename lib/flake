#!/usr/bin/env bash
#set -x

# Flake utility code
# 
# ## Features
# - Set machine as flake controller
# --------------------------------------------------------------------------------------------------
MACHINE=""

# Ensure that flake related commands are executed from the root of the nixos-config directory
flake::ensure_origin()
{
    if [[ "$(grep '# nixos-config' $SOURCE_DIR/README.md)" == "" ]]; then
        log::fatal "Flake commands must be run from the root of the ${cyan}nixos-config${none} repo"
    fi
}

# Ensure machine name was given and exists
# - $1 - target machine
#
# Example: flake::ensure_machine homelab
flake::ensure_machine()
{
    flake::ensure_origin

    MACHINE="$1"
    local machine_path="machines/$MACHINE"
    log::ls -n "Validating machine ${cyan}$MACHINE${none} exists..."
    if [ ! -d "$machine_path" ]; then
        log::status 1
        log::fatal "Invalid machine path: ${cyan}${machine_path}${none}"
    else
        log::status
    fi
}

# Switch flake
# - $1 - target machine
#
# Example: flake::switch homelab
flake::switch()
{
    flake::ensure_machine $MACHINE

    local machine_path="machines/$MACHINE"
    local flake_local="$machine_path/flake.nix"
    local flake_local_lock="$machine_path/flake.lock"
    log::ls "Switching to machine ${cyan}$MACHINE${none}"

    # Stage the flake files
    if [ -e "$flake_local" ]; then
        # Use the machine specific flake files if they exist
        cp "$flake_local" flake.nix 
        cp "$flake_local_lock" flake.lock
    else
        # Use the shared flake base files if they exist
        cp base.nix flake.nix
        cp base.lock flake.lock
    fi

    # Decrypt and temporarily add the flake files
    git decrypt
    git add flake.nix -f
    git add flake.lock -f
    # - Using relative path here on purpose
    ln -sf "machines/$MACHINE/configuration.nix" configuration.nix
    git add configuration.nix -f
    git add "args.dec.yaml" -f
    git add "machines/$MACHINE/args.dec.yaml" -f
}

# Restore the standard flake files back to prestine in git
flake::restore()
{
    if [[ "$(git diff --staged --name-only -- flake.nix flake.lock configuration.nix *.dec* */*.dec*)" != "" ]]; then
        echo -n "Restoring flake files back to prestine"
        git restore --staged flake.nix flake.lock configuration.nix *.dec* */*.dec*
    fi

    if [[ "$(git diff --staged --name-only -- args.nix)" != "" ]]; then
        echo -n "Restoring args.nix to prestine"
        git restore --staged args.nix
        git checkout args.nix
    fi
}

# Cleanup trap function. Typically not used as the local functions will have their own which will
# call flake::restore directly
flake::trap()
{
    flake::restore
    exit 1
}
