#!/usr/bin/env bash

NIXOS_PROFILES_PATH="/nix/var/nix/profiles"

# Usage for the switch command and its sub commands
# --------------------------------------------------------------------------------------------------
switch::usage()
{
    cat <<USAGE
Usage:
  switch [OPTIONS] [ARGS...]

Options:
  -h, --help        Print out usage

Arguments:
  TARGET            System version # or system version path
USAGE

    log::ln "\nExamples:"
    log::subln "Set version 39 as boot default: ${green}./${SCRIPT} switch 39${none}"
    log::subln "Set current as boot default: ${green}./${SCRIPT} switch /run/current-system${none}"
    echo
    exit
}


# Parse the switch commands and execute
# --------------------------------------------------------------------------------------------------
switch::run()
{
    utils::help "$@" "switch::usage"

    core::title
    log::header1 "Switch system version"

    # Determine if the argument is a path or generation number
    local path=$(realpath $1)
    local link=""
    local target=""
    local isGen=false
    if [[ -e "$path" ]]; then
        _getLatestVer _latest
        link="system-${_latest}-link"
        target="$(realpath -e "$path")"
    else
        isGen=true
        link="system-${1}-link"
        path=$(realpath $NIXOS_PROFILES_PATH/$link)
        if [[ ! -e "$path" ]]; then
            log::fatal "argument ${cyan}${1}${none} isn't a generation # or a path"
        fi
    fi

    # Execute switch
    log::subln "Switching to: ${aqua}${_latest}${none}"
    log::subln " System link: ${purple}system${none} -> ${aqua}${link}${none}"
    log::subln " Target path: ${purple}${link}${none} -> ${aqua}${target}${none}"

    pushd $NIXOS_PROFILES_PATH

    # Create the target link if it is a new target
    if [[ $isGen == false ]]; then
        ln -s "$target" "$link"
    fi

    # Update system link in either case
    rm system
    ln -s "$link" system
    popd

    # Finally set the default boot option
    ${path}/bin/switch-to-configuration switch
}

# Get the latest system version
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 return variable name to be set
#
_getLatestVer()
{
    local _result=$1

    # Get the system versions
    declare -a links=( $(echo $(find $NIXOS_PROFILES_PATH -type l -name 'system-*-link' | sort) ) )
    if [[ "${#links}" == 0 ]]; then
        log::fatal "no system versions found at ${cyan}${NIXOS_PROFILES_PATH}${none}"
    fi

    # Get the latest and trim down to just the version number
    local link="${links[-1]}"               # e.g. /nix/var/nix/profiles/system-40-link
    local base=$(basename $link)            # e.g. system-40-link
    local trimPrefix=${base#system-}        # e.g. 40-link
    local trimSuffix=${trimPrefix%-link}    # e.g. 40

    # Increment the version
    local result=$((trimSuffix+1))          # e.g. 41

    # Needs the single quotes to tell it not to treat it as a command
    eval "$_result"="'$result'"
}
