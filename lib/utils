#!/usr/bin/env bash

# Utility code
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------
none="\e[m"
red="\e[1;31m"
cyan="\e[1;36m"
green="\e[1;32m"
yellow="\e[1;33m"

# Temporary file for reading command errors
ERRFILE=/tmp/clu.err

# Handle root or sudo access
# --------------------------------------------------------------------------------------------------
utils::handle_root()
{
    # First bail if using root user directly
    if [[ $EUID -eq 0 && "x${SUDO_USER}" == "x" ]]; then
        log::ls "${red}Error: root user detected without $SUDO_USER set!${none}"
        log::ls "${yellow}Run with user that has passwordless sudo privileges or with sudo${none}"
        exit 1
    fi

    # Next set $USER correctly and drop elevated privileges
    if [[ "x${SUDO_USER}" != "x" ]]; then
        USER="$SUDO_USER"

        # exec      gets rid of the original sudo shell
        # sudo -u   runs new shell as non root user
        # $0        original target
        # $@        original params
        exec sudo -u "$SUDO_USER" -- bash "$0" "$@"
    fi
}

# Execute the given command with conditional redirecto for cleaner output while allowing for 
# debugging if the --debug flag is given which sets $DEBUG
# - runs the given args as pass through
# --------------------------------------------------------------------------------------------------
utils::run()
{
    if [ $DEBUG -eq 1 ]; then
        "$@" &>/dev/null
    else
        "$@"
    fi
}

# Determine if the system is a legacy MBR system
# - Modern systems from 2012 support the GPT partition table supporting disks >= 2TB
# - Legacy systems with older BIOS versions require a MBR partition table and disks <= 2TB
# --------------------------------------------------------------------------------------------------
utils::get_mbr_efi_vars()
{
    # Check if the system supports EFI
    [ -d /sys/firmware/efi ] && EFI=1 || EFI=0

    # Check if the system requires legacy MBR support
    MBR=0
    if [[ $EFI -eq 0 && -f /sys/class/dmi/id/bios_date ]]; then
        local bios_year=$(awk -F'/' '{print $3}' /sys/class/dmi/id/bios_date) 
        if [ $bios_year -le 2012 ]; then
            MBR=1
            log::d "Legacy BIOS detected use ${cyan}MBR partition table${none}"
        fi
    fi
    if [ $MBR -eq 0 ]; then
        log::d "Newer BIOS/UEFI detected use ${cyan}GPT partition table${none}"
    fi
}

# Check if the given binary is installed
#
# ### Params
# - $1 binary to check for
# - $2 message if the binary doesn't exist
#
# ### Examples
# utils::exists "nix-locate" "${cyan}nix-index${none} package must be installed"
#
utils::exists()
{
    local target="$1"
    local msg="$2"

    if [ ! $(which "$target" 2>/dev/null) ]; then
        log::fatal "$msg"
    fi
}

# Common exit code for debug logging
utils::exit()
{
    log::vars
    exit
}

# Execute the given help function if the commands arguments contain help flags anywhere
# 
# ### Params
# - `zero` is a special indicator that zero args are expected and shouldn't fail
# - last argument should always be the usage function to run
#
# ### Examples
# utils::help "$@" update::usage
#
utils::help()
{
    local args=($@)

    # Check for zero args
    local zero=0
    for x in ${args[@]}; do
      [[ "$x" == "zero" ]] && zero=1
    done
    if [ $zero -eq 0 ]; then
        if [[ ${#args[@]} -eq 1 ]]; then eval "${args[-1]}"; fi
    fi

    # Check for help anywhere in the args
    for x in ${args[@]}; do
      if [[ "$x" == "-h" || "$x" == "--help" ]]; then eval "${args[-1]}"; fi
    done
}

# Read user choice to continue or not
# --------------------------------------------------------------------------------------------------
utils::confirm_continue()
{
    echo -en "${yellow}continue [y/n]? ${none}" && read -n 1 confirm && echo
    if [[ "$confirm" != "y" ]]; then
        log::ls "${yellow}Aborting${none}"
        exit 1
    fi
}

# Read user choice from command line
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 return variable name to be set
# - $2 message to display to the user to prompt for read
# - $3 default value to use if no value was read
# - $4 if 's' don't echo result, if 'f' force answer from user
#
# Special commands:
# Instead of answering the read query the user can use these special commands to invoke debugging
# - "debug" will switch to debug mode
# - "exit" will exit to shell
#
utils::read()
{
    DEFAULT="${DEFAULT:-n}"

    local _result=$1
    local msg=$2
    local result=$3
    local multi=$4

    # Notify user as directed
    if [[ "x${result}" == "x" ]]; then
        echo -en "   ${msg}: "
    else
        echo -en "   ${msg} (default=${cyan}${result}${none}): "
    fi

    # Defaulting settings is true then add a newline to format nicely
    if [[ "x$multi" != "xf" && "x$DEFAULT" == "xy" ]]; then
      echo
    fi

    # Handle non default options 
    if [[ "x$multi" == "xf" || "x$DEFAULT" == "xn" ]]; then
        if [ "x$multi" == "xs" ]; then
            read -s value
            echo
        else
            read value
        fi

        # Handle debug values
        [[ "$value" == *"debug"* ]] && DEBUG=1 && value=""
        [[ "$value" == *"exit"* ]] && utils::exit

        # Handle normal user read
        [ "x$value" != "x" ] && result="$value"
    fi

    # Needs the single quotes to tell it not to treat it as a command
    eval "$_result"="'$result'"
}

# Get the user's selection from an array of options
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 return variable name to be set
# - $2 array of options to select from
#
utils::select()
{
    local _result=$1
    shift # Remove the first argument
    local options=($@)
    local result=''
    log::d "Selections: ${options[@]}"

    # Array length + 1 since we are starting with 1 rather than 0
    local out_of_bounds=$((${#options[@]}+1))
    log::d "Select out of bounds: $out_of_bounds"

    # Present options and retry if an invalid selection is given
    while true; do
        echo -en "   Enter your numbered selection (default=${cyan}1${none}): "
        [ "x$DEFAULT" == "xy" ] && echo || read choice
        [ "$choice" == "exit" ] && utils::exit
        [ "x$choice" == "x" ] && choice=1
        log::d "Choice: $choice"
        if [[ $choice -gt 0 && $choice -lt $out_of_bounds ]]; then
            choice=$((choice-1))
            local result=${options[$choice]}
            log::d "Selection: index=$choice, value=${result}"
            break
        else
            echo -e "   ${red}Invalid selection, please try again${none}"
        fi
    done

    # Needs the single quotes to tell it not to treat it as a command
    eval "$_result"="'$result'"
}

# Add padding to the given string
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 return variable name to be set
# - $2 string to pad
# - $3 pad char to use
# - $4 pad length including string length
#
utils::pad_suffix()
{
    local _result="$1"
    local str="$2"
    local char="$3"
    local len=$4

    local i=$len
    while ((i-- > 0)); do
      str+="$char"
    done
    str="${str:0:${len}}"

    # Needs the single quotes to tell it not to treat it as a command
    eval "$_result"="'$str'"
}

# Replace the given value in the given file
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 file to target
# - $2 type of replacement [str | bool | int]
# - $3 value to search for
# - $4 value to replace with
#
utils::replace()
{
    local file=$1
    local kind=$2
    local target=$3
    local value=$4

    if [[ "x$kind" == "xbool" || "x$kind" == "xint" ]]; then
        sed -i -e "s|\(^.*${target} = \).*\(;.*$\)|\1${value}\2|" "${file}"
    elif [ "x$kind" == "xstr" ]; then
        sed -i -e "s|\(^.*${target} = \"\).*\(\";.*$\)|\1${value}\2|" "${file}"
    fi
}

# Builds on utils::replace to update an argument pair name=value
# --------------------------------------------------------------------------------------------------
# $1 - file to target
# $2 - the kind of value [str | bool | int]
# $3 - the name of the variable to change in the args file
# $4 - the value to set
# $5 - the value is a pair to split [ true ]
utils::update()
{
    local file="$1"
    local kind="$2"
    local var="$3"
    local value="$4"
    local pair="$5"

    # Parse the value from the pair, triming the prefix including the '='
    [[ "$pair" == "true" ]] && value="${value#*=}"

    # Update the value in the arg file
    log::ls "Updating ${file}: ${cyan}${var}${none} => ${cyan}${value}${none}"
    utils::replace "$file" "${kind}" "${var}" "${value}"
}
