#!/usr/bin/env bash

# Usage for the list command and its sub commands
# --------------------------------------------------------------------------------------------------
list::usage()
{
    cat <<USAGE
Usage:
  list [OPTIONS] [COMMAND] [ARGS...]

Options:
  -h, --help        Print out usage

Commands:
  profiles          List out available profiles
  versions, ver     List out the versions i.e. system versions
USAGE

    log::ln "\nExamples:"
    log::subln "List out profiles: ${green}./${SCRIPT} ll profiles${none}"
    log::subln "List out versions: ${green}./${SCRIPT} ll ver${none}"
    echo
    exit
}


# Parse the list commands and execute
# --------------------------------------------------------------------------------------------------
list::run()
{
    utils::help "$@" "list::usage"

    # Parse the commnand
    local command=$1; shift
    case "$command" in
        profiles) list::profiles;;
        versions) list::versions;;
        ver) list::versions ;;
        *) log::error "Invalid list command: ${cyan}${command}${none}"; list::usage ;;
    esac

}

# List all profiles in the current configuration repo
#
list::profiles()
{
    log::header1 "List configuration profiles"

    local profiles_dir="${SCRIPT_DIR}/profiles/"
    for x in $(find "$profiles_dir" -name '*.nix' | sort); do
        echo "${x#${profiles_dir}}"
    done
}

# List all the system versions
# 
list::versions()
{
    log::header1 "List system versions"

    # Inspired by the `nixos-rebuild list-generations` command
    find "$NIXOS_PROFILES_PATH" -type l -name 'system-*-link' | sort -Vr |
        while read -r ver; do
            _list::describeVer "$ver"
        done |
            jq --slurp -r '.[] | [
                ([.version, (if .current == true then "current" else "" end)] | join(" ")),
                (.date | fromdate | strflocaltime("%Y-%m-%d %H:%M:%S")),
                .nixosVersion,
                .kernelVersion,
                .configurationRevision
            ] | @tsv' |
                column --separator $'\t' --table --table-columns "Version,Build-date,NixOS version,Kernel,Configuration Revision"
}


# One line description of the system version
# 
# ### Params
# - $1 system version path
#
# ### Output
# 
#
# ### Examples
# _list::describeVer /nix/var/nix/profiles/system-12-link
#
_list::describeVer()
{
    local version_dir="$1"
    local version="$(_getVer "$version_dir")"
    local nixos_version="$(cat "$version_dir/nixos-version" 2> /dev/null || echo "Unknown")"

    local kernel_dir="$(dirname "$(realpath "$version_dir/kernel")")"
    local kernel_version="$(ls "$kernel_dir/lib/modules" || echo "Unknown")"

    # Get the 
    local configurationRevision="$("$version_dir/sw/bin/nixos-version" --configuration-revision 2> /dev/null || true)"

    # jq automatically quotes the output => don't try to quote it in output!
    local build_date="$(stat "$version_dir" --format=%W | jq 'todate')"

    # Check if the system version is the current version i.e. /nix/var/nix/profiles/system
    local current_version="false"
    if [[ "$(basename "$version_dir")" == "$(readlink "$NIXOS_PROFILES_PATH/system")" ]]; then
        current_version="true"
    fi

    # Escape userdefined strings
    nixos_version="$(jq -aR <<< "$nixos_version")"
    kernel_version="$(jq -aR <<< "$kernel_version")"
    configurationRevision="$(jq -aR <<< "$configurationRevision")"

    # Return the json response on stdout
    cat << EOF
{
  "version": $version,
  "date": $build_date,
  "nixosVersion": $nixos_version,
  "kernelVersion": $kernel_version,
  "configurationRevision": $configurationRevision,
  "current": $current_version
}
EOF
}
