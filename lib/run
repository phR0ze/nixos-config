#!/usr/bin/env bash

# Usage for the run command and its sub commands
# --------------------------------------------------------------------------------------------------
run::usage()
{
    cat <<USAGE
Usage:
  run [COMMAND] [ARGS...] [OPTIONS]

Options:
  -h, --help            Print out usage
  -c, --clean           Delete the VM before running to trigger a build first

Commands:
  vm                    Run the given VM with the given arguments
USAGE

    log::ln "\nExamples:"
    log::subln "Run a clean test VM: ${green}./${SCRIPT} run vm -c${none}"
    log::subln "Run the prod1 VM: ${green}./${SCRIPT} run vm prod1${none}"
    echo
    exit
}


# Parse the run commands and execute
# --------------------------------------------------------------------------------------------------
run::run()
{
    utils::help "$@" "run::usage"

    local cmd="${ARGS[0]}" && unset 'ARGS[0]'
    case "$cmd" in
        vm) run::vm "${ARGS[@]}" ;;
        *) log::error "Invalid run command: ${cyan}${command}${none}"; run::usage ;;
    esac
}
 
# Run the test vm
# - $1 - optional machine name to target
# --------------------------------------------------------------------------------------------------
run::vm()
{
    core::preamble

    local machine="${1#vm-}"  # trim vm- prefix
    [[ "$machine" == "" ]] && machine="test"
    MACHINE="vm-${machine}"

    log::header1 "Running VM ${cyan}${MACHINE}${none}"
    flake::ensure_origin

    # Optionally clean first
    if [[ $CLEAN -eq 1 ]]; then
        log::ls "Cleaning ${cyan}${MACHINE}${none}"
        rm -rf "./${MACHINE}"
    fi

    local runner="./${MACHINE}/result/bin/run"

    # Build and install if needed
    if [[ ! -f "$runner" ]]; then
        NO_PREAMBLE=1 && build::vm $MACHINE
        flake::restore
    fi

    # Need root priviledges for this 
    local tap="./${MACHINE}/result/bin/macvtap-up"
    if [[ -f "$tap" ]]; then
        sudo $tap
        log::ln "Running tap ${cyan}${tap}${none}"
    fi

    log::ls "Running ${cyan}${runner}${none}"
    $runner
}
