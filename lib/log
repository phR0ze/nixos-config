#!/usr/bin/env bash

# Logging code
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------
none="\e[m"
red="\e[1;31m"
dred="\e[31m"
green="\e[1;32m"
dgreen="\e[32m"
yellow="\e[1;33m"
orange="\e[33m"
violet="\e[1;34m"
purple="\e[35m"
magenta="\e[1;35m"
aqua="\e[36m"
cyan="\e[1;36m"

# Controls the logging level cut off
# --------------------------------------------------------------------------------------------------
# ### Features
# - Reads user supplied runtime override e.g. LOG_LEVEL=debug sudo ./clu install
# - error 0     non recoverable errors, log and exit
# - warn  1     recoverable errors or issues   
# - info  2     standard logging
# - debug 3     verbose logging
# --------------------------------------------------------------------------------------------------
# e.g. "debug" means log: error, warn, info, debug
# e.g. "warn" means log: error, warn
# --------------------------------------------------------------------------------------------------
[ -z ${LOG_LEVEL+x} ] && LOG_LEVEL="info"
_error=0; _warn=1; _info=2; _debug=3;
case $LOG_LEVEL in
    error) _log_level=0 ;;
    warn) _log_level=1 ;;
    info) _log_level=2 ;;
    debug) _log_level=3 ;;
    *) echo -e "${red}Error:${none} LOG_LEVEL=${cyan}${LOG_LEVEL}${none} is invalid"; exit;;
esac

# Internal root logging function
# --------------------------------------------------------------------------------------------------
# ### Features
# - indents 2 spaces
# - logs at given level unless LOG_LEVEL cuts it off
# ### Params
# - optional newline argument before log level
# - $1 the log level to log at
# - $2 the message to log
_log::log()
{
    local args=("$@")

    # Extract optional newline and required level
    local newline=${args[0]} && args=("${args[@]:1}")
    local level=$newline
    if [[ "$newline" == "-n" ]]; then
        local level=${args[0]} && args=("${args[@]:1}")
    else
        newline=""
    fi

    # Log if level is sufficient
    if [ $_log_level -ge $level ]; then
        local msg="${args[@]}"
        echo -e ${newline} "${msg}"
    fi
}

# Log an error level then exit
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::fatal()
{
    local msg="$@"
    log::error "${msg}"
    exit 1
}

# Log an error and exit
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::error()
{
    local msg="$@"
    _log::log $_error "${red}Error:${none} ${msg}"
}

# Log at info level with newline
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::ln()
{
    local msg="$@"
    _log::log $_info "${msg}"
}

# Log list item at info level
# - Adds a >> to give a listing feel
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::ls()
{
    local args=("$@")
    local newline="${args[0]}"
    [[ "$newline" == "-n" ]] && args=("${args[@]:1}") || newline=""
    _log::log $newline $_info ">> ${args[@]}"
}

# Log at debug level with newline
# - Adds a violet >> to distinguish debug lines
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::ln_d()
{
    local msg="$@"
    _log::log $_debug "${purple}>>${none} ${msg}"
}

# Log 2 space indent at info level with newline
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::subln()
{
    local msg="$@"
    _log::log $_info "  ${msg}"
}

# Log 3 space indent at info level with newline
# --------------------------------------------------------------------------------------------------
# ### Params
# - $@ the message to log
log::subln3()
{
    local msg="$@"
    _log::log $_info "   ${msg}"
}

# Internal function to print out a header
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 color to use
# - $2 header message
# - $3 header kind: 0 (no separator), 1 (single separator), 2 (double separator)
# - $4 optional char to use for the separation line
log::header()
{
    local color=$1
    local msg=$2
    local kind=$3
    local char=$4
    local separator=""

    # If the message has no color then colorize it
    if [[ "${msg}" != *"\e[1"* ]]; then
      msg="${color}${msg}${none}"
    fi

    # Calculate the separator in advance as it doesn't seem to translate otherwise
    if [[ $kind > 0 && "$char" != "" ]]; then
      separator="${color}$(printf "%.0s${char}" {1..100})${none}"
    fi

    _log::log $_info ""
    if [[ $kind > 1 ]]; then
      _log::log $_info "$separator"
    fi
    _log::log $_info "${color}::${none} ${msg}"
    if [[ $kind > 0 ]]; then
      _log::log $_info "$separator"
    fi
}

# Print out a double header with newline
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 msg
log::header2()
{
    local msg=$1
    log::header "${cyan}" "${msg}" 2 '-'
}

# Print out a single header with newline
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 msg
log::header1()
{
    local msg=$1
    log::header "${cyan}" "${msg}" 1 '-'
}

# Print out a sub header
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 msg
log::header0()
{
    local msg=$1
    log::header "${cyan}" "${msg}" 0
}

# Log out status of the last command
# --------------------------------------------------------------------------------------------------
# ### Params
# - $1 optional status to use instead
log::status()
{
    local status="$1"
    [[ "$status" == "" ]] && status=$?
    if [ $status -eq 0 ]; then
        echo -e "${green}success${none}"
    else
        echo -e "${red}failure${none}"
    fi
}

# Dump out debug variables
log::vars()
{
    log::ln_d "Debug variables"
}
