#!/usr/bin/env bash
#set -x

# Build code
# 
# ## Features
# - The ISO build target is 'develop' by default which is the heaviest profile and builds on all the 
#   other profiles which means that all packages will be included on the ISO. By changing the ISO 
#   target to something smaller like 'light' we can create a smaller ISO with less packages included.
#
# - VM hard disk can be tiny e.g. 1 GiB as all the predefined apps and configs are in the host's nix 
#   store and mounted readonly in the VM.
# --------------------------------------------------------------------------------------------------
ARGS=""

# Usage for the build command and its sub commands
# --------------------------------------------------------------------------------------------------
build::usage()
{
    cat <<USAGE
Usage:
  build [COMMAND] [ARGS...] [OPTIONS] 

Options:
  -h, --help            Print out usage
  -c, --clean           Delete the VM before running to trigger a build first
  --impure              Pass impure into the system update

Commands:
  iso [PROFILE]         Build the installable ISO with an optional profile override
  vm [MACHINE]          Build the given VM machine or the default test vm 'vm-test'
USAGE

    log::ln "\nExamples:"
    log::subln "Build host machine: ${green}./${SCRIPT} build${none}"
    log::subln "Build given machine: ${green}./${SCRIPT} build macbook${none}"
    log::subln "Build the test VM: ${green}./${SCRIPT} build vm${none}"
    log::subln "Build the prod1 VM: ${green}./${SCRIPT} build vm prod1${none}"
    log::subln "Clean build of test VM: ${green}./${SCRIPT} build vm -c${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso xfce/base.nix${none}"
    echo
    exit
}

# Parse the build commands and execute
# --------------------------------------------------------------------------------------------------
build::run()
{
    utils::help "$@" zero "build::usage"

    # Process the given argument
    local arg=$1; shift
    case "$arg" in
        iso) build::iso "$@" ;;
        vm) build::vm "$@" ;;
        *) build::machine "$arg" ;;
    esac
}
 
# Build the target machine
# - $1 - the machine name to target
# --------------------------------------------------------------------------------------------------
build::machine()
{
    core::preamble

    # Use hostname as machine
    MACHINE="$1"
    [[ "$1" == "" ]] && MACHINE="$(hostname)"

    # Target includes the prefix path
    TARGET="machines/$MACHINE"

    log::header1 "Building ${cyan}${TARGET}${none}"
    flake::switch "$TARGET"
    trap flake::restore EXIT

    $SUDO nixos-rebuild dry-activate $TRACE $IMPURE --flake "${CONFIG_DIR}#target"
}


# Build the installable iso
# --------------------------------------------------------------------------------------------------
# https://releases.nixos.org/
# https://discourse.nixos.org/t/nixos-reproducible-builds-minimal-installation-iso-successfully-independently-rebuilt/34756
# - $1 - profile target to use e.g. 'base.nix'
# --------------------------------------------------------------------------------------------------
build::iso()
{
    core::preamble

    # Handle input target
    PROFILE="$1"
    [[ "$1" == "" ]] && PROFILE="base.nix"

    # Target includes the prefix path
    TARGET="profiles/$PROFILE"

    log::header1 "Building installable ISO for ${cyan}${TARGET}${none}"
    flake::switch "$TARGET"
    trap flake::restore EXIT

    $SUDO nix build "${CONFIG_DIR}#nixosConfigurations.iso.config.system.build.isoImage"
}

# Build the vm
# - $1 - optional machine name to target
# - $2 - optional no preamble flag
# --------------------------------------------------------------------------------------------------
build::vm()
{
    [[ $NO_PREAMBLE -eq 0 ]] && core::preamble

    if [[ "$1" == "machines/"* ]]; then
        MACHINE="${1#machines/}"
    else
        local machine="${1#vm-}"  # trim vm- prefix
        [[ "$machine" == "" ]] && machine="test"
        MACHINE="vm-${machine}"
    fi

    # Target includes the prefix path
    TARGET="machines/$MACHINE"

    log::header1 "Building ${cyan}${TARGET}${none}"
    flake::switch "$TARGET"
    trap flake::restore EXIT

    # Optionally clean first
    if [[ $CLEAN -eq 1 ]]; then
        log::ls "Cleaning ${cyan}${MACHINE}${none}"
        $SUDO rm -rf "${CONFIG_DIR}/${MACHINE}"
    fi

    $SUDO nix build "${CONFIG_DIR}#nixosConfigurations.target.config.system.build.vm"

    # Install the vm in its own directory
    log::ls "Installing at ${cyan}./${MACHINE}${none}"
    $SUDO mkdir -p "${CONFIG_DIR}/${MACHINE}"
    [ -e result ] && mv -f result "${CONFIG_DIR}/${MACHINE}"
}
