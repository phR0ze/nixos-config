#!/usr/bin/env bash
#set -x

# Build code
# 
# ## Features
# - The ISO build target is 'develop' by default which is the heaviest profile and builds on all the 
#   other profiles which means that all packages will be included on the ISO. By changing the ISO 
#   target to something smaller like 'light' we can create a smaller ISO with less packages included.
#
# - VM hard disk can be tiny e.g. 1 GiB as all the predefined apps and configs are in the host's nix 
#   store and mounted readonly in the VM.
# --------------------------------------------------------------------------------------------------
ARGS=""

# Usage for the build command and its sub commands
# --------------------------------------------------------------------------------------------------
build::usage()
{
    cat <<USAGE
Usage:
  build [COMMAND] [ARGS...] [OPTIONS] 

Options:
  -h, --help            Print out usage

Commands:
  iso [PROFILE]         Build the installable ISO with an optional profile override
  vm [MACHINE]          Build the given VM machine or the default test vm 'vm-test'
USAGE

    log::ln "\nExamples:"
    log::subln "Build host target: ${green}./${SCRIPT} build${none}"
    log::subln "Build the test VM: ${green}./${SCRIPT} build vm${none}"
    log::subln "Build the prod1 VM: ${green}./${SCRIPT} build vm prod1${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso generic/light${none}"
    echo
    exit
}

# Parse the build commands and execute
# --------------------------------------------------------------------------------------------------
build::run()
{
    # Use hostname to build target
    if [[ "$1" == "" ]]; then
        build::machine $(hostname)
        exit 0
    fi

    utils::help "$@" "build::usage"

    # Process the given command
    local command=$1; shift
    case "$command" in
        iso) build::iso "$@" ;;
        vm) build::vm "$@" ;;
        *) log::error "Invalid build command: ${cyan}${command}${none}"; echo; build::usage ;;
    esac
}
 
# Build the target machine
# - $1 - the machine name to target
# --------------------------------------------------------------------------------------------------
build::machine()
{
    core::preamble

    local machine="${1}"

    log::header1 "Building ${cyan}${machine}${none}"
    flake::switch "$machine"
    trap flake::restore EXIT

    nix build .#nixosConfigurations.target.config
    #nix build .#nixosConfigurations.target.config.system.build.vm
    #nixos-rebuild switch $impure --flake "path:/etc/nixos#target"
}


# Build the installable iso
# --------------------------------------------------------------------------------------------------
# https://releases.nixos.org/
# https://discourse.nixos.org/t/nixos-reproducible-builds-minimal-installation-iso-successfully-independently-rebuilt/34756
# --------------------------------------------------------------------------------------------------
build::iso()
{
    core::preamble
    log::header0 "Building installable ISO"

    local profile="$1"
    if [[ "$profile" != "" ]]; then
        profile="${profile%.*}" # trim off the file extension
        _build::update_args "str" "profile" "$profile"
    fi

    nix build .#nixosConfigurations.iso.config.system.build.isoImage

    [[ "$profile" != "" ]] && _build::post
}

# Build the vm
# - $1 - optional machine name to target
# - $2 - optional no preamble flag
# --------------------------------------------------------------------------------------------------
build::vm()
{
    [[ $NO_PREAMBLE -eq 0 ]] && core::preamble

    local machine="${1#vm-}"  # trim vm- prefix
    [[ "$machine" == "" ]] && machine="test"
    MACHINE="vm-${machine}"

    log::header1 "Building ${cyan}${MACHINE}${none}"
    flake::switch "$MACHINE"
    trap flake::restore EXIT

    nix build .#nixosConfigurations.target.config.system.build.vm

    # Install the vm in its own directory
    log::ls "Installing at ${cyan}./${MACHINE}${none}"
    mkdir -p "$MACHINE"
    [ -d result ] && mv result "$MACHINE"
}

# Post build operations
_build::post()
{
    if [[ $BUILD_UPDATE_ARGS == 1 ]]; then
        if [[ "$(git diff --staged --name-only -- ${ARGS})" != "" ]]; then
            log::ln "Restoring back to original: ${ARGS}"
            git restore --staged "${ARGS}"
        fi
    fi
}
