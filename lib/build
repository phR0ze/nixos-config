#!/usr/bin/env bash
#set -x

# Build code
# 
# ## Features
# - The ISO build target is 'develop' by default which is the heaviest profile and builds on all the 
#   other profiles which means that all packages will be included on the ISO. By changing the ISO 
#   target to something smaller like 'light' we can create a smaller ISO with less packages included.
#
# - VM hard disk can be tiny e.g. 1 GiB as all the predefined apps and configs are in the host's nix 
#   store and mounted readonly in the VM.
# --------------------------------------------------------------------------------------------------
ARGS=""

# Usage for the build command and its sub commands
# --------------------------------------------------------------------------------------------------
build::usage()
{
    cat <<USAGE
Usage:
  build [COMMAND] [ARGS...] [OPTIONS] 

Options:
  -h, --help            Print out usage
  --service=VALUE       Configure VM as systemd service (default=false) [true|false]
  --hostname=VALUE      Configure VM hostname also used as systemd unit name (default=nixos)
  --ip=VALUE            IP Address to use for the VM
  --spice=VALUE         Use SPICE for this VM (default=false) [true|false]
  --spicePort=VALUE     SPICE port to use (default=5901)
  --cores=VALUE         Cores to use (default=4)
  --diskSize=VALUE      Disk size in GiB to use (default=20)
  --memorySize=VALUE    Memory size in GiB to use (default=4)
  --resolution.x=VALUE  Y Resolution value to use (default=1920)
  --resolution.y=VALUE  Y Resolution value to use (default=1080)
  --no-clean            Don't clean up the args file afterward

Commands:
  iso [PROFILE]         Build the installable ISO with an optional profile override
  vm [MACHINE]          Build the given VM machine or the default test vm 'vm-test'
USAGE

    log::ln "\nExamples:"
    log::subln "Build the test VM: ${green}./${SCRIPT} build vm${none}"
    log::subln "Build the prod1 VM: ${green}./${SCRIPT} build vm prod1${none}"
    log::subln "Build spice VM: ${green}./${SCRIPT} build vm generic/server --service=true --hostname=nixos70 --ip=192.168.1.70/24 --spice=true --spicePort=5971 --diskSize=1${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso generic/light${none}"
    echo
    exit
}

# Parse the build commands and execute
# --------------------------------------------------------------------------------------------------
build::run()
{
    utils::help "$@" "build::usage"

    local command=$1; shift
    case "$command" in
        iso) build::iso "$@" ;;
        vm) build::vm "$@" ;;
        *) log::error "Invalid build command: ${cyan}${command}${none}"; echo; build::usage ;;
    esac
}
 
# Build the installable iso
# --------------------------------------------------------------------------------------------------
# https://releases.nixos.org/
# https://discourse.nixos.org/t/nixos-reproducible-builds-minimal-installation-iso-successfully-independently-rebuilt/34756
# --------------------------------------------------------------------------------------------------
build::iso()
{
    core::preamble
    log::header0 "Building installable ISO"

    local profile="$1"
    if [[ "$profile" != "" ]]; then
        profile="${profile%.*}" # trim off the file extension
        _build::update_args "str" "profile" "$profile"
    fi

    nix build .#nixosConfigurations.iso.config.system.build.isoImage

    [[ "$profile" != "" ]] && _build::post
}

# Build the vm
# - $1 - optional machine name to target
# --------------------------------------------------------------------------------------------------
build::vm()
{
    core::preamble

    local machine=""
    BUILD_UPDATE_ARGS=0
    NO_CLEAN="${NO_CLEAN:-0}"

    local machine="${1#vm-}"  # trim vm- prefix
    [[ "$machine" == "" ]] && machine="test"
    MACHINE="vm-${machine}"

    log::header1 "Building ${cyan}${MACHINE}${none}"
    flake::switch "$MACHINE"
    trap flake::restore EXIT

    nix build .#nixosConfigurations.target.config.system.build.vm
}

# Post build operations
_build::post()
{
    if [[ $BUILD_UPDATE_ARGS == 1 && $NO_CLEAN == 0 ]]; then
        if [[ "$(git diff --staged --name-only -- ${ARGS})" != "" ]]; then
            log::ln "Restoring back to original: ${ARGS}"
            git restore --staged "${ARGS}"
        fi
    fi
}
