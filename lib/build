#!/usr/bin/env bash

# Build code
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the build command and its sub commands
# --------------------------------------------------------------------------------------------------
build::usage()
{
    cat <<USAGE
Usage:
  build [OPTIONS] [COMMAND] [ARGS...]

Options:
  -h, --help        Print out usage

Commands:
  iso               Build the installable ISO
  vm [PROFILE]      Build the test VM with an optional profile override
USAGE

    log::ln "\nExamples:"
    log::subln "Build the test VM: ${green}./${SCRIPT} build vm${none}"
    log::subln "Build server test VM: ${green}./${SCRIPT} build vm generic/server${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso generic/light${none}"
    echo
    exit
}


# Parse the build commands and execute
# --------------------------------------------------------------------------------------------------
build::run()
{
    utils::help "$@" "build::usage"

    local command=$1; shift
    case "$command" in
        iso) build::iso "$@" ;;
        vm) build::vm "$@" ;;
        *) log::error "Invalid build command: ${cyan}${command}${none}"; build::usage ;;
    esac
}
 
# Build the installable iso
# --------------------------------------------------------------------------------------------------
# https://releases.nixos.org/
# https://discourse.nixos.org/t/nixos-reproducible-builds-minimal-installation-iso-successfully-independently-rebuilt/34756
# --------------------------------------------------------------------------------------------------
build::iso()
{
    core::title
    log::header0 "Building installable ISO"

    _build::switch_profile "iso_profile" "$1"

    nix build .#nixosConfigurations.iso.config.system.build.isoImage

    _build::restore_profile "$1"
}

# Build the test vm
# --------------------------------------------------------------------------------------------------
build::vm()
{
    core::title
    log::header0 "Building test VM"

    _build::switch_profile "profile" "$1"

    nix build .#nixosConfigurations.vm.config.system.build.vm

    _build::restore_profile "$1"
}

# Change the profile if given
# $1 - the name of the profile variable to change
# $2 - the profile value to set
_build::switch_profile()
{
    local varname="$1"
    local profile="$2"
    local opts="${SCRIPT_DIR}/flake_private.nix"
    if [[ "$profile" != "" ]]; then
        profile="${profile%.*}" # trim off the file extension
        log::ln "Switching VM profile to ${cyan}${profile}${none}"
        utils::replace str "${varname}" "${profile}" "${opts}"
        git add "${opts}"

        # Ensure the restore is always called
        trap _build::cleanup INT KILL
    fi
}

# Restore the profile back to what is was before by unstaging and resetting
# $1 - the profile value to trigger off from
_build::restore_profile()
{
    local profile="$1"
    local opts="${SCRIPT_DIR}/flake_private.nix"
    if [[ "$profile" != "" ]]; then
        log::ln "Restoring profile back to original"
        git restore --staged "${opts}"
        git checkout "${opts}"
    fi
}

# Cleanup if interrupted or failed after changing the profile
_build::cleanup()
{
    _build::restore_profile yes
}
