#!/usr/bin/env bash

# Build code
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the build command and its sub commands
# --------------------------------------------------------------------------------------------------
build::usage()
{
    cat <<USAGE
Usage:
  build [OPTIONS] [COMMAND] [ARGS...]

Options:
  -h, --help        Print out usage

Commands:
  iso               Build the installable ISO
  vm [PROFILE]      Build the test VM with an optional profile override
USAGE

    log::ln "\nExamples:"
    log::subln "Build the test VM: ${green}./${SCRIPT} build vm${none}"
    log::subln "Build server test VM: ${green}./${SCRIPT} build vm generic/server${none}"
    log::subln "Build the installable ISO: ${green}./${SCRIPT} build iso${none}"
    echo
    exit
}


# Parse the build commands and execute
# --------------------------------------------------------------------------------------------------
build::run()
{
    utils::help "$@" "build::usage"

    local command=$1; shift
    case "$command" in
        iso) build::iso "$@" ;;
        vm) build::vm "$@" ;;
        *) log::error "Invalid build command: ${cyan}${command}${none}"; build::usage ;;
    esac
}
 
# Build the installable iso
# --------------------------------------------------------------------------------------------------
# https://releases.nixos.org/
# https://discourse.nixos.org/t/nixos-reproducible-builds-minimal-installation-iso-successfully-independently-rebuilt/34756
# --------------------------------------------------------------------------------------------------
build::iso()
{
    core::title
    log::header0 "Building installable ISO"
    nix build .#nixosConfigurations.iso.config.system.build.isoImage
}

# Build the test vm
# --------------------------------------------------------------------------------------------------
build::vm()
{
    core::title
    log::header0 "Building test VM"

    # Switch profile if directed
    local profile="$1"
    if [[ "$profile" != "" ]]; then
        _build::switch_profile "$profile"
    fi

    nix build .#nixosConfigurations.vm.config.system.build.vm

    # Restore the profile back to the original
    if [[ "$profile" != "" ]]; then
        _build::restore_profile
    fi
}

# Change the profile
# $1 - the profile to set
_build::switch_profile()
{
    local profile="$1"
    local opts="${SCRIPT_DIR}/flake_private.nix"
    profile="${profile%.*}" # trim off the file extension
    log::ln "Switching VM profile to ${cyan}${profile}${none}"
    utils::replace str "profile" "${profile}" "${opts}"
    git add "${opts}"
}

# Restore the profile back to what is was before by unstaging and resetting
_build::restore_profile()
{
    local opts="${SCRIPT_DIR}/flake_private.nix"
    log::ln "Restoring profile back to original"
    git restore --staged "${opts}"
    git checkout "${opts}"
}
