#!/usr/bin/env bash

# Installation code
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the install command and its sub commands
# --------------------------------------------------------------------------------------------------
install::usage()
{
    cat <<USAGE
Usage:
  install [COMMAND] [ARGS...] [OPTIONS]

Options:
  -h, --help        Print out usage

Commands:
  install [PATH]    Execute the installer with an optional alternate nixos-config destination
USAGE

    log::ln "\nExamples:"
    log::subln "Launch installer: ${green}sudo ./${SCRIPT} install${none}"
    log::subln "Launch installer with alternate nixos-config path: ${green}sudo ./${SCRIPT} install tmp${none}"
    echo
    exit
}

# Partition disk and mount for install at ${ROOT_MOUNT}
install::prepare_disk()
{
    log::header1 "Partitioning and mounting destination disk ${cyan}${DESTDEV}${none}..."

    # Wipe, partition and format disk
    # --------------------------------------------------------------------------
    echo -e ":: ${red}WARNING this will DESTROY all data on disk:${none} ${cyan}${DESTDEV}${none}"
    utils::read DESTROY 'Do you wish to continue?' 'n' 'f'
    [ "x${DESTROY}" != "xy" ] && [ "x${DESTROY}" != "xskip" ] && exit
    [ "x${DESTROY}" == "xskip" ] && return

    echo -en "\n:: Destroying any magic strings and/or signatures on ${cyan}${DESTDEV}${none}..."
    wipefs --all --force ${DESTDEV} &>/dev/null
    utils::check_status

    echo -en ":: Wiping partition table on ${cyan}${DESTDEV}${none}..."
    sgdisk --zap ${DESTDEV} &>/dev/null
    utils::check_status

    # Set partition identifiers
    if [ "x${SCSI}" == "x1" ]; then
        PART_BOOT="${DESTDEV}1"
        PART_SWAP="${DESTDEV}2"
        PART_ROOT="${DESTDEV}3"
    else
        PART_BOOT="${DESTDEV}p1"
        PART_SWAP="${DESTDEV}p2"
        PART_ROOT="${DESTDEV}p3"
    fi

    # EFI: Create an ESP (EFI system partition) using linux code EF00
    # to act as a storage place for the EFI bootloaders to be launched by the UEFI firmware.
    # https://wiki.archlinux.org/index.php/EFI_System_Partition#Create_the_partition
    if [ "x${EFI}" == "x1" ]; then
        echo -en ":: Creating ${cyan}${PART_BOOT}${none} as ${cyan}ESP boot partition${none}..."
        sgdisk -n 0:0:+512M -t 0:EF00 -c 0:"EFI system" ${DESTDEV} &>/dev/null
        utils::check_status

        echo -en ":: Formatting ${cyan}${PART_BOOT}${none} (ESP) as ${cyan}FAT32${none}..."
        mkfs.vfat -n "BOOT" ${PART_BOOT} &>/dev/null
        utils::check_status

    # BIOS: Create a BIOS boot partition EF02
    else
        echo -en ":: Creating ${cyan}${PART_BOOT}${none} as ${cyan}BIOS boot partition${none}..."
        sgdisk -n 0:0:+2M -t 0:EF02 -c 0:"BIOS system" ${DESTDEV} &>/dev/null
        utils::check_status
    fi

    # Create SWAP partition 8200
    echo -en ":: Creating ${cyan}${PART_SWAP}${none} as ${cyan}Linux swap partition${none}..."
    sgdisk -n 0:0:+4G -t 0:8200 -c 0:"Linux swap" ${DESTDEV} &>/dev/null
    utils::check_status

    # Create root partition 8300
    echo -en ":: Creating ${cyan}${PART_ROOT}${none} as ${cyan}Linux filesystem partition${none}..."
    sgdisk -n 0:0:0 -t 0:8300 -c 0:"Linux filesystem" ${DESTDEV} &>/dev/null
    utils::check_status

    # Set boot flag for device
    echo -en ":: Setting boot flag on ${cyan}${DESTDEV}${none}..."
    sgdisk ${DESTDEV} --attributes=3:set:2 &>/dev/null
    utils::check_status

    # Configure swap partition
    echo -en ":: Formatting ${cyan}${PART_SWAP}${none} as ${cyan}swap${none}..."
    mkswap -L SWAP ${PART_SWAP} &>/dev/null
    utils::check_status
    echo -en ":: Starting swap on ${cyan}${PART_SWAP}${none}..."
    swapon ${PART_SWAP} &>/dev/null
    utils::check_status

    # mkfs.ext4 option descriptions
    # -F            force creation even if some params don't make sense
    # -L            set volume name to well known label used by bootloaders
    # -m 0          don't reserve blocks for super user daemons
    # -q            run in quiet mode for scripts
    echo -en ":: Formatting ${cyan}${PART_ROOT}${none} as ${cyan}ext4${none}..."
    mkfs.ext4 -F -m 0 -q -L ROOT ${PART_ROOT} &>/dev/null
    utils::check_status

    # Mount root as ROOT_MOUNT and disable access time writes (speeds things up)
    echo -en ":: Mounting ${cyan}${PART_ROOT}${none} as ${cyan}${ROOT_MOUNT}${none}..."
    mount -o noatime ${PART_ROOT} ${ROOT_MOUNT} &>/dev/null
    utils::check_status

    # UEFI: boot partition needs to be mounted over the root at /boot to capture the Linux
    # standard boot file install e.g. kernel and initramfs. We keep them on the same partition
    # as the EFI/BOOT/BOOTX64.efi as EFI can't mount a ext4 filesystem.
    if [ "x${EFI}" == "x1" ]; then
        echo -en ":: Mounting ${cyan}${PART_BOOT}${none} (ESP) as ${cyan}${ROOT_MOUNT}/boot${none}..."
        mkdir -p ${ROOT_MOUNT}/boot
        mount ${PART_BOOT} ${ROOT_MOUNT}/boot &>/dev/null
        utils::check_status
    fi
    # BIOS: boot partition shouldn't be formatted or mounted in this case as its just for the MBR
}

# Generate the `hardware-configuration.nix` using nixos tooling.
# Extract key values and make them available in the settings file `flake_args.nix`.
# - sets NICS array
install::generate_hardware_config()
{
    # Using an explicit separate path here to support testing overrides
    NIXOS_CONFIG_GEN_DIR="${ROOT_MOUNT}/etc/nixos"

    echo -en ":: Generating NIXOS configuration defaults..."
    nixos-generate-config --root ${ROOT_MOUNT} &>/dev/null
    utils::check_status

    # Extract networking for use during install
    GEN_HARDWARE_CONFIG="${NIXOS_CONFIG_GEN_DIR}/hardware-configuration.nix"
    NICS=($(sed -n 's|^\s*# networking.interfaces.\(.*\)\.use.*|\1|p' ${GEN_HARDWARE_CONFIG}))

    echo -en ":: Storing NIC0 setting: ${cyan}${NICS[0]}${none}..."
    utils::replace str "nic0" "${NICS[0]}" "${NIXOS_ARGS}"
    utils::check_status

    if [[ ${NICS[1]} != "" ]]; then
        echo -en ":: Storing NIC1 setting: ${cyan}${NICS[1]}${none}..."
        utils::replace str "nic1" "${NICS[1]}" "${NIXOS_ARGS}"
        utils::check_status
    fi

    # Modules must be at least staged for the flake to recognize them
    if [[ "x$TESTING" != "xy" ]]; then
        pushd ${NIXOS_CONFIG_DIR}
        git add hardware-configuration.nix -f
        popd
    fi
}

install::config_system()
{
    NIXOS_ARGS="${NIXOS_CONFIG_DIR}/flake_args.nix"

    # Setup the NixOS configuration files
    # This must be done after the disk partioning so that the system picks up the new partitions
    # ----------------------------------------------------------------------------------------------
    log::header1 "Configure settings file: ${NIXOS_ARGS}"

    if [[ "x$TESTING" != "xy" ]]; then
        echo -en ":: Create the NixOS config dir ${cyan}${NIXOS_CONFIG_DIR}${none}..."
        mkdir -p ${NIXOS_CONFIG_DIR}
        utils::check_status

        echo -en ":: Stage NIXOS configuration files at ${cyan}${NIXOS_CONFIG_DIR}${none}..."
        cp -r $SCRIPT_DIR/. ${NIXOS_CONFIG_DIR}
        utils::check_status
    fi

    install::generate_hardware_config

    # Extract the current NIXOS version from the generated configuration.nix file
    GEN_CONFIG="${NIXOS_CONFIG_GEN_DIR}/configuration.nix"
    NIXOS_VER=$(sed -n 's|^\s*system.stateVersion\s*=\s*"\(.*\)";.*|\1|p' "${GEN_CONFIG}")
    echo -en ":: Storing NIXOS target version setting: ${cyan}${NIXOS_VER}${none}..."
    utils::check_status
    rm -f "${NIXOS_CONFIG_DIR}/configuration.nix" # clean up
    utils::replace str "stateVersion" "${NIXOS_VER}" "${NIXOS_ARGS}"

    # Configuring user set values
    # ----------------------------------------------------------------------------------------------

    # Configure new user and root user
    local pass=""
    [ "x$DEFAULT" == "xy" ] && pass=" (default: ${cyan}${DEFAULT_PASS}${none})"
    echo -en ":: Storing new ${cyan}${USER_NAME}${none} and ${cyan}root${none} passwords${pass}..."

    utils::replace str "fullname" "${FULL_NAME}" "${NIXOS_ARGS}"
    utils::replace str "email" "${USER_EMAIL}" "${NIXOS_ARGS}"
    utils::replace str "username" "${USER_NAME}" "${NIXOS_ARGS}"
    utils::replace str "userpass" "${USER_PASS}" "${NIXOS_ARGS}"
    utils::replace str "git_user" "${GIT_USER}" "${NIXOS_ARGS}"
    utils::replace str "git_email" "${GIT_EMAIL}" "${NIXOS_ARGS}"

    [ "x${IP}" == "xDHCP" ] && ip="" || ip="${IP}"
    utils::replace str "ip" "${ip}" "${NIXOS_ARGS}"
    utils::replace str "subnet" "${SUBNET}" "${NIXOS_ARGS}"
    utils::replace str "gateway" "${GATEWAY}" "${NIXOS_ARGS}"
    utils::replace str "primary_dns" "${PRIMARY_DNS}" "${NIXOS_ARGS}"
    utils::replace str "fallback_dns" "${FALLBACK_DNS}" "${NIXOS_ARGS}"

    [ "x${BLUETOOTH}" == "xy" ] && bluetooth="true" || bluetooth="false"
    utils::replace str "bluetooth" "${bluetooth}" "${NIXOS_ARGS}"
    [ "x${AUTO_LOGIN}" == "xy" ] && autologin="true" || autologin="false"
    utils::replace bool "autologin" "${autologin}" "${NIXOS_ARGS}"
    [ "x${NFS_SHARES}" == "xy" ] && nfsshares="true" || nfsshares="false"
    utils::replace bool "nfs_shares" "${nfsshares}" "${NIXOS_ARGS}"
    utils::check_status

    # Configure boot device target
    echo -en ":: Storing boot device type setting..."
    [ "x${EFI}" == "x1" ] && efi_str="true" || efi_str="false"
    utils::replace bool "efi" "${efi_str}" "${NIXOS_ARGS}"

    [ "x${EFI}" == "x1" ] && mbr_str="nodev" || mbr_str="${DESTDEV}"
    utils::replace str "mbr" "${mbr_str}" "${NIXOS_ARGS}"
    utils::check_status

    # Configure system settings
    utils::replace str "timezone" "${TIMEZONE}" "${NIXOS_ARGS}"
    utils::replace str "hostname" "${HOSTNAME}" "${NIXOS_ARGS}"
    utils::replace str "profile" "${MACHINE}/${PROFILE}" "${NIXOS_ARGS}"

    # Modules must be at least staged for the flake to recognize them
    pushd ${NIXOS_CONFIG_DIR} &>/dev/null
    git add "${NIXOS_ARGS}"
    popd &>/dev/null

    # Execute the NixOS install
    # ----------------------------------------------------------------------------------------------
    if [ "x$TESTING" != "xy" ]; then
        log::header1 "Installing NixOS configuration"
        echo -e ":: Pre-populating the Nix Store..."
        nix copy --all --no-check-sigs --offline --to local?root="${ROOT_MOUNT}"

        # Run the installer: $NIXOS_CONFIG_DIR will usually be /mnt/etc/nixos
        # nixos-install --no-root-passwd --no-channel-copy --flake /mnt/etc/nixos#system
        nixos-install --no-root-passwd --no-channel-copy --flake "${NIXOS_CONFIG_DIR}#system"
        if [ $? -ne 0 ]; then
            echo -e ":: ${red}Failure building the install flake${none}"
            echo -e "   1. Fix the flake issue at ${cyan}${NIXOS_CONIFG}${none}"
            echo -e "   2. Rerun: ${cyan}nixos-install --no-root-passwd --no-channel-copy --flake ${NIXOS_CONFIG_DIR}#system${none}"
        fi

        lockfile="${ROOT_MOUNT}/nix/files.lock"
        echo -e ":: Adding files lock file ${lockfile} to avoid file automation on every boot"
        touch "${lockfile}"

        echo -e ":: Update the swap entry to use the device UUID"
        SWAP_UUID=$(blkid -s UUID -o value ${PART_SWAP})
        utils::replace str "${PART_SWAP}" "/dev/disk/by-uuid/${SWAP_UUID}" "${NIXOS_CONFIG_DIR}/hardware-configuration.nix"
        pushd ${NIXOS_CONFIG_DIR} &>/dev/null
        git add hardware-configuration.nix -f
        popd &>/dev/null
    fi

    echo
    echo -e ":: ${yellow}1. Power down your system:${none} sudo poweroff"
    echo -e ":: ${yellow}2. Remove the install media${none}"
    echo -e ":: ${yellow}3. Boot the system back up${none}"
}

# Start the install wizard
# --------------------------------------------------------------------------------------------------
install::run()
{
    # Default installer values
    # ----------------------------------------------------------------------------------------------
    #utils::help "$@" "install::usage"
    core::preamble

    # Optionally enable testing
    args=($@)
    if [[ "${args[0]}" == "testing" ]]; then
        log::header0 "Testing installer with current nixos-config"
        ROOT_MOUNT=.
        NIXOS_CONFIG_DIR=.
        TESTING="y"
    fi

    DEFAULT="${DEFAULT:-n}"
    TESTING="${TESTING:-n}"
    ROOT_MOUNT="${ROOT_MOUNT:-/mnt}"
    NIXOS_CONFIG_DIR="${NIXOS_CONFIG_DIR:-${ROOT_MOUNT}/etc/nixos}"
    SCSI=0
    TIMEZONE='America/Boise'

    # Network settings
    HOSTNAME='nixos'
    IP='DHCP'

    # User settings
    GIT_USER='admin'
    GIT_EMAIL='nixos@nixos.org'
    FULL_NAME='admin'
    USER_EMAIL='nixos@nixos.org'
    USER_NAME='admin'
    USER_PASS='admin'
    DEFAULT_PASS='admin'
    AUTO_LOGIN='n'

    # User profile and services settings
    MACHINE='generic'
    PROFILE='desktop'
    NFS_SHARES='n'

    # Detect EFI supported system
    [ -d /sys/firmware/efi ] && EFI=1 || EFI=0

    # Collect the machine selection from the user
    # - Don't present the iso options to the user
    # ----------------------------------------------------------------------------------------------
    MACHINES=()
    local machines_dir="${SCRIPT_DIR}/profiles"
    local _machines=($(echo $(find $machines_dir -mindepth 1 -maxdepth 1 -type d -not -path "*/profiles/iso" -not -path "*/profiles/vm" | sort)))
    log::header0 "Select a deployment machine:"
    local i=0
    for x in "${_machines[@]}"; do
        local _machine="$(basename "$x")"
        utils::pad_suffix _1 "$_machine" " " 20           # pad to 30 characters
        MACHINES+=($_machine)                             # add to the final profiles list
        echo -e "   $((i+1))) ${cyan}${_1}${none}${desc}" # print out padded entry with description
        i=$((i+1))                                        # increment i
    done
    utils::select MACHINE "${MACHINES[@]}"

    # Collect the profile selection from the user
    # ----------------------------------------------------------------------------------------------
    PROFILES=()
    local profiles_dir="${machines_dir}/${MACHINE}"
    local _profiles=($(echo $(find $profiles_dir -name "*.nix" | sort)))
    log::header0 "Select a deployment profile:"
    local i=0
    for j in "${!_profiles[@]}"; do # ! means loop over indices instead of values
        local x=${_profiles[$j]}

        # Check if the profile contains the "# - Directly installable" string
        local desc=$(grep "# - Directly installable" ${x} 2>/dev/null)
        if [[ "x${desc}" != "x" ]]; then
            desc="${desc#*: }"                # grab the suffixed description of the install option
            x=${x//$profiles_dir\/}           # trim off the suffix dir
            x=${x//.nix}                      # trim off the extension
            utils::pad_suffix _1 "$x" " " 20  # pad to 30 characters
            PROFILES+=($x)                    # add to the final profiles list
            echo -e "   $((i+1))) ${cyan}${_1}${none}${desc}" # print out padded entry with description
            i=$((i+1))                  # increment i
        fi
    done
    utils::select PROFILE "${PROFILES[@]}"

    # Determine if this is a default deployment
    # ----------------------------------------------------------------------------------------------
    log::header0 "Automatically deploy with defaults?"
    utils::read DEFAULT 'Use automatic mode with defaults' 'n'

    # Drop out debug variables if in debug mode
    # ----------------------------------------------------------------------------------------------
    log::ln_d "Entering debug mode"
    log::ln_d "Debug lines are prefixed with violet ${violet}>>${none}"
    log::vars

    # Collect install destination choice from user
    # ----------------------------------------------------------------------------------------------

    # Read in the potential destination disks details
    # [Major Device numers](https://www.kernel.org/doc/Documentation/admin-guide/devices.txt)
    # Filtering out: loop (7), floppy (2), CD-ROM (11, 15, 20, 24, 25, 26, 27, 28, 29, 30, 32)
    local excludes=2,7,11,15,20,24,25,26,27,28,29,30,32

    # Get all disks, sort by size and filter out any that are measured in bytes or megabytes
    #
    # ### Paramaters
    # -d    do not print holder devices or slaves
    # -n    do not print headings line
    # -e    exclude sepcified devices, loop(7), floppy(2)
    # -x    sort by the size of the drive smallest first
    DISKS_DETAILED=$(lsblk -dn -e ${excludes} -o NAME,SIZE,MODEL,TYPE,HOTPLUG,LABEL -x SIZE --json | \
      jq -rc '[.blockdevices[] | . += {mag: (.size | capture("(?<other>[0-9.]+)(?<value>[A-Z])")) } | select(.type == "disk" and .hotplug != true and .mag.value != "M" and .mag.value != "B" and .label != "cyberlinux-installer")]')

    # Get all the disks by name to provide to the user for selection
    DISKS=($(echo ${DISKS_DETAILED} | jq -rc '[.[].name] | map("/dev/"+.) | .[]'))

    # Select the smallest sized disk by default i.e. most likely be the boot drive
    DESTDEV=$(echo ${DISKS_DETAILED} | jq -rc '[.[].name] | map("/dev/"+.) | .[0]')

    # Print out the detected disks
    [ "x$DEFAULT" != "xy" ] && log::header0 "Select a disk as your install destination:"
    local i=0
    echo $DISKS_DETAILED | jq -rc '.[]' | while read x; do
        i=$((i+1))
        local disk="/dev/$(echo $x | jq -r '.name')"
        local size="$(echo $x | jq -r '.size')"
        local model="$(echo $x | jq -r '.model')"
        [ "x$DEFAULT" != "xy" ] && echo -en "   ${i}) [${cyan}${disk}${none}](${cyan}${size}${none})"
        [ "x$DEFAULT" != "xy" ] && [ "$model" != "null" ] && echo -en " - ${model}"
        [ "x$DEFAULT" != "xy" ] && echo ""
    done

    # Get user choice
    if [ "x$DEFAULT" != "xy" ]; then
        utils::select DESTDEV "${DISKS[@]}"
    fi

    [ "x${DEBUG}" == "x1" ] && log::ln_d "User selected: $DESTDEV"

    # Determine the storage drive partition pattern.
    # ----------------------------------------------------------------------------------------------
    # https://wiki.archlinux.org/title/Device_file#Block_devices
    # Typically this is of the form device name followed by a number or device name
    # followed by a number with a 'p' prefix. I've only seen two different styles so far.
    #
    # Older style
    # - SCSI: /dev/sda        partition1: /dev/sda1
    # - QEMU: /dev/vda        partition1: /dev/vda1
    # Modern style
    # - NVMe: /dev/nvme0n1    partition1: /dev/nvme0n1p1
    # - MMC:  /dev/mmcblk0    partition1: /dev/mmcblk0p1

    # Match DESTDEV with /dev/sda and /dev/vda
    [ -z "${DESTDEV##*/dev/sd*}" ] || [ -z "${DESTDEV##*/dev/vd*}" ] && SCSI=1

    # Collect networking choices from user
    # ----------------------------------------------------------------------------------------------
    if [ "x$DEFAULT" != "xy" ]; then
        log::header0 "Configure networking:"
        utils::read HOSTNAME 'Enter hostname' $HOSTNAME
        utils::read IP 'Enter static IP, e.g. 192.168.1.2/24' 'DHCP'
        if [ "x${IP}" != "xDHCP" ]; then
            utils::read SUBNET 'Enter subnet' $(echo $IP | awk -F. '{print $1"."$2"."$3".0/24"}')
            utils::read GATEWAY 'Enter gateway' $(echo $IP | awk -F. '{print $1"."$2"."$3".1"}')
            utils::read PRIMARY_DNS 'Enter primary dns' $(echo $IP | awk -F. '{print $1"."$2"."$3".53"}')
            utils::read FALLBACK_DNS 'Enter fallback dns' $(echo $IP | awk -F. '{print $1"."$2"."$3".53"}')
        fi
        utils::read BLUETOOTH 'Enable bluetooth support' 'n'
    fi

    # Collect time and date choices from user
    # ----------------------------------------------------------------------------------------------
    if [ "x$DEFAULT" != "xy" ]; then
        log::header0 "Configure time and date:"
        utils::read TIMEZONE 'Enter timezone' "$TIMEZONE"
        utils::read TIMEDATE_SET "Change time ${cyan}$(date --iso-8601=seconds) UTC${none}" 'n'
        if [ "x$TIMEDATE_SET" == "xy" ]; then
            while true; do
                utils::read TIMEDATE "Use ${cyan}ISO 8601 seconds${none} format" "$(date --iso-8601=seconds)"
                date -s "${TIMEDATE}" &>/dev/null
                [ $? -eq 0 ] && break
            done
        fi
    fi

    # Collect new user account choices from user
    # ----------------------------------------------------------------------------------------------
    if [ "x$DEFAULT" != "xy" ]; then
        log::header0 "Create new user account:"
        log::subln3 "Account includes: user & email, git user & email and full name\n"
        utils::read USER_NAME 'Enter new user name' $USER_NAME
        utils::read USER_EMAIL 'Enter new user email' $USER_EMAIL
        while true; do
            utils::read USER_PASS 'Enter new password' 'admin' 's'
            utils::read USER_PASS2 'Enter password again' 'admin' 's'
            [ "x$USER_PASS" == "x$USER_PASS2" ] && break
            echo -e "   ${red}Passwords don't match, please try again${none}"
        done
        utils::read GIT_USER 'Enter git user name' $USER_NAME
        utils::read GIT_EMAIL 'Enter git user email' $USER_EMAIL
        utils::read FULL_NAME 'Enter full name' $USER_NAME
    fi

    # Collect auto login choice from user
    # ----------------------------------------------------------------------------------------------
    if [ "x$DEFAULT" != "xy" ]; then
        utils::read AUTO_LOGIN 'Do you want to auto login' 'n'
    fi

    # Collect services selections from user
    # ----------------------------------------------------------------------------------------------
    if [ "x$DEFAULT" != "xy" ]; then
        utils::read NFS_SHARES 'Do you want to mount pre-defined nfs shares' 'n'
    fi

    # Start install
    # ----------------------------------------------------------------------------------------------
    log::header1 "Starting installation"
    log::header0 "Options being used for installation"
    log::subln3 "profile=${cyan}${MACHINE}/${PROFILE}${none}"

    # Networking settings
    log::subln3 "hostname=${cyan}${HOSTNAME}${none}"
    log::subln3 "ip=${cyan}${IP}${none}"
    log::subln3 "subnet=${cyan}${SUBNET}${none}"
    log::subln3 "gateway=${cyan}${GATEWAY}${none}"
    log::subln3 "primary_dns=${cyan}${PRIMARY_DNS}${none}"
    log::subln3 "fallback_dns=${cyan}${FALLBACK_DNS}${none}"

    # User settings
    log::subln3 "user_name=${cyan}${USER_NAME}${none}"
    log::subln3 "user_email=${cyan}${USER_EMAIL}${none}"
    if [ "x$DEFAULT" == "xy" ] || [ "x$DEFAULT_PASS" == "x$USER_PASS" ]; then
        log::subln3 "user_pass=${cyan}${DEFAULT_PASS}${none}"
    else
        log::subln3 "user_pass=${cyan}********${none}"
    fi
    log::subln3 "git_user=${cyan}${GIT_USER}${none}"
    log::subln3 "git_email=${cyan}${GIT_EMAIL}${none}"
    log::subln3 "full_name=${cyan}${FULL_NAME}${none}"

    # System settings
    log::subln3 "nfs_shares=${cyan}${NFS_SHARES}${none}"
    log::subln3 "bluetooth=${cyan}${BLUETOOTH}${none}"
    log::subln3 "timezone=${cyan}${TIMEZONE}${none}"
    log::subln3 "auto_login=${cyan}${AUTO_LOGIN}${none}"
    log::subln3 "dest_dev=${cyan}${DESTDEV}${none}"
    log::subln3 "SCSI=${cyan}${SCSI}${none}"
    log::subln3 "EFI=${cyan}${EFI}${none}"

    # Partition the target disk and mount it for deployment
    if [ "x$TESTING" != "xy" ]; then
        install::prepare_disk
    fi

    # Take user selections and apply to NixOS configuration
    install::config_system
}
