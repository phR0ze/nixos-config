#!/usr/bin/env bash

# Update the system
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the update command and its sub commands
# --------------------------------------------------------------------------------------------------
update::usage()
{
    cat <<USAGE
Usage:
  update [COMMAND] [ARGS...] [OPTIONS]

Options:
  -h, --help        Print out usage

Commands:
  flake             Update the flake.lock file with the latest
  profile PROFILE   Change the system profile to the given one
  system            Update the system with the configuration changes

system args:
  reset-xfce        Remove existing xfce configuration
USAGE

    log::ln "\nExamples:"
    log::subln "Update flake: ${green}./${SCRIPT} update flake${none}"
    log::subln "Update the system: ${green}./${SCRIPT} update system${none}"
    log::subln "Update to the given profile: ${green}./${SCRIPT} update profile xfce/develop${none}"
    log::subln "Update the system, resetting xfce: ${green}./${SCRIPT} update system reset-xfce${none}"
    echo
    exit
}

# Parse the update commands and execute
# --------------------------------------------------------------------------------------------------
update::run()
{
    utils::help "$@" "update::usage"

    local command=$1; shift
    case "$command" in
        flake) update::flake ;;
        profile) update::profile "$@" ;;
        system) update::system "$@" ;;
        *) log::error "Invalid update command: ${cyan}${command}${none}"; update::usage ;;
    esac
}

# Update the flake
# --------------------------------------------------------------------------------------------------
update::flake()
{
    core::title
    log::header1 "Update flake"

    nix flake update
}


# Update the target profile in the options file e.g. flake_args.nix
# --------------------------------------------------------------------------------------------------
update::profile()
{
    core::title
    log::header1 "Update install profile"

    log::ln "Switching install profile to ${cyan}${@}${none}"
    utils::replace str "profile" "${@}" "${FLAKE_ARGS}"
    git add "${FLAKE_ARGS}"

    _update::preUpdate
    _update::removeUserXfceConfigs
    _update::updateSystem
    _update::postUpdate
}

# Update the system with the system configuration changes
# --------------------------------------------------------------------------------------------------
update::system()
{
    core::title
    log::header1 "Update system version"

    # Cleanup the .config/xfce4 directories to ensure new settings don't conflict
    _update::preUpdate
    if [[ "$@" == "reset-xfce" ]]; then
        _update::removeUserXfceConfigs
    fi
    _update::updateSystem
    _update::postUpdate
}

_update::preUpdate()
{
    log::ln "Removing ${cyan}/nix/files.lock${none} to permit files update"
    rm -f /nix/files.lock

    log::ln "Shutting down ${cyan}xfconfd${none} to avoid conflicts"
    pkill xfconfd
}

# Remove user xfce configurations to get a clean point to start from
_update::removeUserXfceConfigs()
{
    local users=$(find /home -mindepth 1 -maxdepth 1)
    users+=('/root')
    for x in ${users[@]}; do
      local target="${x}/.config/xfce4"
      log::ln "Cleaning up: ${cyan}${target}${none}"
      rm -rf "$target"
    done
}

# Trigger the Nix flake based system update
_update::updateSystem()
{
    nixos-rebuild switch --flake "path:/etc/nixos#system"
}

_update::postUpdate()
{
    log::ln "Adding ${cyan}/nix/files.lock${none} to block files updates during reboots"
    touch /nix/files.lock
}
