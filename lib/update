#!/usr/bin/env bash

# Update the system
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the update command and its sub commands
# --------------------------------------------------------------------------------------------------
update::usage()
{
    cat <<USAGE
Usage:
  update [COMMAND] [ARGS...] [OPTIONS]

Options:
  -h, --help        Print out usage

Commands:
  flake             Update the flake.lock file with the latest
  profile PROFILE   Change the system profile to the given one
  system [MACHINE]  Update the system with any configuration changes for the given machine or hostname

system args:
  reset-xfce        Remove existing xfce configuration
  impure            Pass impure into the flake system
USAGE

    log::ln "\nExamples:"
    log::subln "Update flake: ${green}./${SCRIPT} update flake${none}"
    log::subln "Update system using hostname: ${green}./${SCRIPT} update system${none}"
    log::subln "Update system by name: ${green}./${SCRIPT} update system macbook${none}"
    log::subln "Update to the given profile: ${green}./${SCRIPT} update profile xfce/develop${none}"
    log::subln "Update the system, resetting xfce: ${green}./${SCRIPT} update system reset-xfce${none}"
    echo
    exit
}

# Parse the update commands and execute
# --------------------------------------------------------------------------------------------------
update::run()
{
    utils::help "$@" "update::usage"

    local command=$1; shift
    case "$command" in
        flake) update::flake ;;
        profile) update::profile "$@" ;;
        system) update::system "$@" ;;
        *) log::error "Invalid update command: ${cyan}${command}${none}"; update::usage ;;
    esac
}

# Update the flake
# --------------------------------------------------------------------------------------------------
update::flake()
{
    core::title
    log::header1 "Update flake"
    flake::ensure_origin

    # Stage the base flake files
    cp base.nix flake.nix
    cp base.lock flake.lock
    git add flake.nix flake.lock -f

    nix flake update

    # Clean up after
    cp flake.lock base.lock
    git restore --staged flake.nix flake.lock
}


# Update the target profile in the options file e.g. flake_args.nix
# --------------------------------------------------------------------------------------------------
update::profile()
{
    core::title
    log::header1 "Update install profile"
    echo "${orange}TODO: not implemented!${none}" && exit 1

    log::ln "Switching install profile to ${cyan}${@}${none}"
    utils::replace str "profile" "${@}" "${FLAKE_ARGS}"
    git add "${FLAKE_ARGS}"
}

# Update the system with the system configuration changes
# --------------------------------------------------------------------------------------------------
# - $1 - optional hostname to use
update::system()
{
    core::title
    log::header1 "Update system version"
    [[ "$1" == "" ]] && MACHINE=$(hostname) || MACHINE="$1"
    log::ln "Using hostname ${cyan}${MACHINE}${none}"
    _update::pre

    # Cleanup the .config/xfce4 directories to ensure new settings don't conflict
    local arg=$1; shift
    if [[ "$arg" == "reset-xfce" ]]; then
        _update::removeUserXfceConfigs
    fi

    # Execute update
    local impure=""
    [[ "$@" == "impure" ]] && impure="--impure"
    nixos-rebuild switch $impure --flake "path:/etc/nixos#system"

    _update::post
}

# Pre update operations
_update::pre()
{
    log::ln "Removing ${cyan}/nix/files.lock${none} to permit files update"
    rm -f /nix/files.lock

    log::ln "Shutting down ${cyan}xfconfd${none} to avoid conflicts"
    pkill xfconfd

    flake::switch "$MACHINE"

    trap _update::trap INT KILL
}

# Remove user xfce configurations to get a clean point to start from
_update::removeUserXfceConfigs()
{
    local users=$(find /home -mindepth 1 -maxdepth 1)
    users+=('/root')
    for x in ${users[@]}; do
      local target="${x}/.config/xfce4"
      log::ln "Cleaning up: ${cyan}${target}${none}"
      rm -rf "$target"
    done
}

# Post update operations
_update::post()
{
    flake::restore

    log::ln "Adding ${cyan}/nix/files.lock${none} to block files updates during reboots"
    touch /nix/files.lock
}

# Cleanup trap function
_update::trap()
{
    _update::post
    exit 1
}
