#!/usr/bin/env bash

# Update the system
# 
# ## Features
#
# --------------------------------------------------------------------------------------------------

# Usage for the update command and its sub commands
# --------------------------------------------------------------------------------------------------
update::usage()
{
    cat <<USAGE
Usage:
  update [COMMAND] [ARGS...] [OPTIONS]

Options:
  -h, --help        Print out usage
  --impure          Pass impure into the system update
  --reset-xfce      Remove existing xfce configuration during system update

Commands:
  flake [MACHINE]   Update the given machine's flake.lock or root base.lock if not given
  system [MACHINE]  Update system with given machine's configuration or hostname's if not given
USAGE

    log::ln "\nExamples:"
    log::subln "Update flake: ${green}./${SCRIPT} update flake${none}"
    log::subln "Update system using hostname: ${green}./${SCRIPT} update system${none}"
    log::subln "Update system by name: ${green}./${SCRIPT} update system macbook${none}"
    log::subln "Update the system, resetting xfce: ${green}./${SCRIPT} update system --reset-xfce${none}"
    echo
    exit
}

# Parse the update commands and execute
# --------------------------------------------------------------------------------------------------
update::run()
{
    utils::help "$@" "update::usage"

    local command=$1; shift
    case "$command" in
        flake) update::flake "$@" ;;
        profile) update::profile "$@" ;;
        system) update::system "$@" ;;
        *) log::error "Invalid update command: ${cyan}${command}${none}"; update::usage ;;
    esac
}

# Update the flake
# --------------------------------------------------------------------------------------------------
update::flake()
{
    core::preamble
    log::header1 "Update flake"

    MACHINE="$1"
    TARGET="machines/$MACHINE"

    # Switch to target flake
    if [[ "$MACHINE" != "" ]]; then
        flake::switch $TARGET
        trap flake::restore EXIT
    else
        log::header0 "Switching to base flake"
        flake::ensure_origin
        cp base.nix flake.nix
        cp base.lock flake.lock
        git add flake.nix flake.lock -f
    fi

    # Update flake
    nix flake update

    # Clean up after
    if [[ "$MACHINE" != "" ]]; then
        cp flake.lock "$TARGET"
        # cleanup will be done by trap
    else
        cp flake.lock base.lock
        git restore --staged flake.nix flake.lock
    fi
}

# Update the system with the system configuration changes
# --------------------------------------------------------------------------------------------------
# - $1 - optional hostname to use
update::system()
{
    core::preamble
    log::header1 "Update system version"

    # Set additional flags as specified
    local reset_xfce=0
    while [ $# -gt 0 ]; do
        local arg=$1; shift
        case "$arg" in
            --reset-xfce*) reset_xfce=1 ;;
            *) MACHINE="$arg" ;;
        esac
    done

    # Optionally set the machine being used and log it
    [[ "$MACHINE" == "" ]] && MACHINE=$(hostname)
    log::ls "Using hostname ${cyan}${MACHINE}${none}"
    _update::pre

    # Cleanup the .config/xfce4 directories to ensure new settings don't conflict
    if [ $reset_xfce -eq 1 ]; then
        _update::removeUserXfceConfigs
    fi

    # Execute update
    nixos-rebuild switch $TRACE $IMPURE --flake "path:/etc/nixos#target"
}

# Pre update operations
_update::pre()
{
    log::ls -n "Removing ${cyan}/nix/files.lock${none} to permit files update..."
    rm -f /nix/files.lock
    log::status

    log::ls "Shutting down ${cyan}xfconfd${none} to avoid conflicts"
    pgrep xfconfd

    flake::switch "$MACHINE"

    trap _update::post EXIT
}

# Remove user xfce configurations to get a clean point to start from
_update::removeUserXfceConfigs()
{
    local users=$(find /home -mindepth 1 -maxdepth 1)
    users+=('/root')
    for x in ${users[@]}; do
      local target="${x}/.config/xfce4"
      log::ls "Cleaning up: ${cyan}${target}${none}"
      rm -rf "$target"
    done
}

# Post update operations
_update::post()
{
    flake::restore

    log::ls "Adding ${cyan}/nix/files.lock${none} to block files updates during reboots"
    touch /nix/files.lock
}
