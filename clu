#!/usr/bin/env bash

# MIT License
# Copyright (c) 2024 phR0ze
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# --------------------------------------------------------------------------------------------------
# Simple NixOS install automation
# 
# ## Features
# - Handles partitioning the disk in preparation for installation
# - Allows for customizing some common install settings
#   - hostname
# --------------------------------------------------------------------------------------------------
SCRIPT=$(basename $0)
SCRIPT_DIR=$(readlink -f $(dirname $BASH_SOURCE[0]))
SOURCE_DIR=$(pwd)
source "${SCRIPT_DIR}/lib/all"

core::preamble()
{
    VERSION=0.1.0
    #VERSION=$(cat VERSION)
    log::header "${cyan}" "Codified Likeness Utility - clu v${VERSION}" 2 '='
    echo -e "${green}that is to say, build me a NixOS that I like${none}"
}

core::usage()
{
    core::preamble
    cat <<USAGE
Usage:
  ./clu [COMMAND] [ARGS...] [OPTIONS]

Options:
  --debug           Debug mode with verbose output
  -h, --help        Print out top level usage
  -q, --quiet       Don't print out anything but the specific output data
  -v, -verbose      Verbose output
  --ver             Print version and exit

Commands:
  init              Configure the current git repo with sops git hooks
  build             Build components
  clean             Clean various system components
  deploy            Deploy Virtual Machine
  dev               Setup a shell environment
  help              Get help for a command
  install           Install system configuration
  list, ll          List out system information
  logs              Print out logging for various components
  manage            Manage the clu repo
  pkgs              Package management commands
  registry          Interact with the nix registry
  repl              Launch the Nix repl
  run               Launch the test VM and other tools
  switch            Switch system version to the given one
  shell             Run a nix-shell
  test              Testing function for development
  update            Update the system with any changed configuration
  upgrade           Upgrade the system or a specific application to a new version
USAGE

    log::ln "\nExamples:"
    log::subln "${green}Launch installer:${none} sudo ./${SCRIPT} install"
    log::subln "${green}Build the installer ISO:${none} ./${SCRIPT} build iso"
    echo
    exit
}

# Parse commands
# --------------------------------------------------------------------------------------------------
[[ $# -eq 0 ]] && core::usage
ARGS=("$@")
QUIET=0
IMPURE=""

# Handle globals by detecting them, taking action then removing them from the array.
for i in "${!ARGS[@]}"; do
    [[ "${ARGS[i]}" == "-h" || "${ARGS[i]}" == "--help" ]] && core::usage

    if [[ "${ARGS[i]}" == "--debug" ]]; then
        LOG_LEVEL="debug" && _log_level=$_debug && unset 'ARGS[i]'
    elif [[ "${ARGS[i]}" == "--impure" ]]; then
        IMPURE="--impure" && unset 'ARGS[i]'
    elif [[ "${ARGS[i]}" == "-q" || "${ARGS[i]}" == "--quiet" ]]; then
        QUIET=1 && LOG_LEVEL="error" && _log_level=$_error && unset 'ARGS[i]'
    fi
done
ARGS=("${ARGS[@]}") # rebuild to remove deleted items

# Extract the first argument
CMD="${ARGS[0]}" && unset 'ARGS[0]'
case "$CMD" in
    init) init::run "${ARGS[@]}" ;;
    build) build::run "${ARGS[@]}" ;;
    clean) clean::run "${ARGS[@]}" ;;
    deploy) deploy::run "${ARGS[@]}" ;;
    dev) dev::run "${ARGS[@]}" ;;
    install) install::run "${ARGS[@]}" ;;
    list) list::run "${ARGS[@]}" ;;
    ll) list::run "${ARGS[@]}" ;;   # list alias
    manage) manage::run "${ARGS[@]}" ;;
    pkgs) pkgs::run "${ARGS[@]}" ;;
    registry) registry::run "${ARGS[@]}" ;;
    repl) nix repl -f '<nixpkgs>' ;;
    run) run::run "${ARGS[@]}" ;;
    shell) shell::run "${ARGS[@]}" ;;
    switch) switch::run "${ARGS[@]}" ;;
    test) test::run "${ARGS[@]}" ;;
    update) update::run "${ARGS[@]}" ;;
    upgrade) upgrade::run "${ARGS[@]}" ;;
    *) log::error "Invalid command: ${cyan}${command}${none}"; core::usage ;;
esac
