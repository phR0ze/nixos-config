#!/usr/bin/env bash

# MIT License
# Copyright (c) 2024 phR0ze
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# --------------------------------------------------------------------------------------------------
# Simple NixOS install automation
# 
# ## Features
# - Handles partitioning the disk in preparation for installation
# - Allows for customizing some common install settings
#   - hostname
# --------------------------------------------------------------------------------------------------
SCRIPT=$(basename $0)
SCRIPT_DIR=$(readlink -f $(dirname $BASH_SOURCE[0]))
source "${SCRIPT_DIR}/lib/all"

core::title()
{
    VERSION=0.0.1
    #VERSION=$(cat VERSION)
    log::header '=' "${cyan}" "Codified Likeness Utility - clu v${VERSION}" 1
    echo -e "${green}that is to say, build me a linux that i like${none}"
}

core::usage()
{
    core::title
    cat <<USAGE
Usage:
  ./clu [options] [COMMAND] [ARGS...]

Options:
  --debug           Debug mode with verbose output
  -h, --help        Print out top level usage
  -q, --quiet       Don't print out anything but the specific output data
  -v, -verbose      Verbose output
  --ver             Print version and exit

Commands:
  build             Build components
  help              Get help for a command
  install           Install system configuration
  pkgs              Package management commands
  test              Testing function for development
  update            Update the system with any changed configuration
USAGE

    log::ln "\nExamples:"
    log::subln "${green}Install the default configuration:${none} sudo ./${SCRIPT} install"
    log::subln "${green}Build the installer ISO:${none} ./${SCRIPT} build iso"
    echo
    exit
}

# Parse commands
# --------------------------------------------------------------------------------------------------
[[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]] && core::usage

# Handle programmatic output mode
QUIET=0
if [[ $1 == "-q" || $1 == "--quiet" ]]; then
    QUIET=1
    LOG_LEVEL="error"
    _log_level=$_error
    shift
fi

command=$1; shift
case "$command" in
    build) build::run "$@" ;;
    install) install::run "$@" ;;
    pkgs) pkgs::run "$@" ;;
    test) test::run "$@" ;;
    update) update::run "$@" ;;

    *) log::error "Invalid command: ${cyan}${command}${none}"; core::usage ;;
esac

# vim: ft=sh:ts=4:sw=4:sts=4
